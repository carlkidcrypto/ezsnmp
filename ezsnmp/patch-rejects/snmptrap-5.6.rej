--- apps/snmptrap.c
+++ apps/snmptrap.cpp
@@ -26,70 +27,65 @@
 ******************************************************************/
 #include <net-snmp/net-snmp-config.h>
 
 #include <stdlib.h>
 #endif
 #include <unistd.h>
 #endif
 #include <string.h>
 #else
 #include <strings.h>
 #endif
 #include <sys/types.h>
 # include <netinet/in.h>
 #endif
 # include <sys/time.h>
 # include <time.h>
 #else
 #  include <sys/time.h>
 # else
 #  include <time.h>
 # endif
 #endif
 #include <sys/select.h>
 #endif
 #include <stdio.h>
 #include <sys/socket.h>
 #endif
 #include <netdb.h>
 #endif
 #include <arpa/inet.h>
 #endif
 
 #include <net-snmp/net-snmp-includes.h>
 
 oid             objid_enterprise[] = { 1, 3, 6, 1, 4, 1, 3, 1, 1 };
 oid             objid_sysuptime[] = { 1, 3, 6, 1, 2, 1, 1, 3, 0 };
 oid             objid_snmptrap[] = { 1, 3, 6, 1, 6, 3, 1, 1, 4, 1, 0 };
 int             inform = 0;
 
-void
-usage(void)
-{
+#include "exceptionsbase.h"
+#include "helpers.h"
+#include "snmptrap.h"
+
+void snmptrap_usage(void) {
     fprintf(stderr, "USAGE: %s ", inform ? "snmpinform" : "snmptrap");
     snmp_parse_args_usage(stderr);
     fprintf(stderr, " TRAP-PARAMETERS\n\n");
     snmp_parse_args_descriptions(stderr);
-    fprintf(stderr,
-            "  -C APPOPTS\t\tSet various application specific behaviour:\n");
+   fprintf(stderr, "  -C APPOPTS\t\tSet various application specific behaviour:\n");
     fprintf(stderr, "\t\t\t  i:  send an INFORM instead of a TRAP\n");
     fprintf(stderr,
-            "\n  -v 1 TRAP-PARAMETERS:\n\t enterprise-oid agent trap-type specific-type uptime [OID TYPE VALUE]...\n");
+           "\n  -v 1 TRAP-PARAMETERS:\n\t enterprise-oid agent "
+           "trap-type specific-type uptime [OID TYPE VALUE]...\n");
     fprintf(stderr, "  or\n");
-    fprintf(stderr,
-            "  -v 2 TRAP-PARAMETERS:\n\t uptime trapoid [OID TYPE VALUE] ...\n");
+   fprintf(stderr, "  -v 2 TRAP-PARAMETERS:\n\t uptime trapoid [OID TYPE VALUE] ...\n");
 }
 
-int
-snmp_input(int operation,
-           netsnmp_session * session,
-           int reqid, netsnmp_pdu *pdu, void *magic)
-{
+int snmp_input(int operation, netsnmp_session *session, int reqid, netsnmp_pdu *pdu, void *magic) {
     return 1;
 }
 
-static void
-optProc(int argc, char *const *argv, int opt)
-{
+void snmptrap_optProc(int argc, char *const *argv, int opt) {
     switch (opt) {
     case 'C':
         while (*optarg) {
@@ -109,18 +104,22 @@
                 inform = 1;
                 break;
             default:
-                fprintf(stderr,
-                        "Unknown flag passed to -C: %c\n", optarg[-1]);
-                exit(1);
+                  std::string err_msg =
+                      "Unknown flag passed to -C: " + std::string(1, optarg[-1]) + "\n";
+                  throw ParseErrorBase(err_msg);
             }
         }
         break;
     }
 }
 
-int
-main(int argc, char *argv[])
-{
+int snmptrap(std::vector<std::string> const &args) {
+   /* completely disable logging otherwise it will default to stderr */
+   netsnmp_register_loghandler(NETSNMP_LOGHANDLER_NONE, 0);
+
+   int argc;
+   std::unique_ptr<char *[], Deleter> argv = create_argv(args, argc);
+
     netsnmp_pdu    *pdu, *response;
     oid             name[MAX_OID_LEN];
     size_t          name_length;
@@ -129,30 +128,38 @@
     int             status;
     char           *trap = NULL;
     char           *prognam;
 #ifndef NETSNMP_DISABLE_SNMPV1
     char           *specific = NULL, *description = NULL, *agent = NULL;
     in_addr_t      *pdu_in_addr_t;
 #endif
 
+
     prognam = strrchr(argv[0], '/');
-    if (prognam)
+   if (prognam) {
         prognam++;
-    else
+   } else {
         prognam = argv[0];
+   }
 
     putenv(strdup("POSIXLY_CORRECT=1"));
 
-    if (strcmp(prognam, "snmpinform") == 0)
+   if (strcmp(prognam, "snmpinform") == 0) {
         inform = 1;
-    switch (arg = snmp_parse_args(argc, argv, &session, "C:", optProc)) {
+   }
+
+   switch (arg = snmp_parse_args(argc, argv.get(), &session, "C:", snmptrap_optProc)) {
     case NETSNMP_PARSE_ARGS_ERROR:
+         throw ParseErrorBase("NETSNMP_PARSE_ARGS_ERROR");
+
     case NETSNMP_PARSE_ARGS_SUCCESS_EXIT:
+         throw ParseErrorBase("NETSNMP_PARSE_ARGS_SUCCESS_EXIT");
+
     case NETSNMP_PARSE_ARGS_ERROR_USAGE:
-        usage();
+         throw ParseErrorBase("NETSNMP_PARSE_ARGS_ERROR_USAGE");
     default:
         break;
     }
 
     session.callback = snmp_input;
     session.callback_magic = NULL;
 
@@ -205,49 +205,49 @@
          * boots and time...  I'll cause a not-in-time-window report to
          * be sent back to this machine. 
          */
-        if (session.engineBoots == 0)
+      if (session.engineBoots == 0) {
             session.engineBoots = 1;
-        if (session.engineTime == 0)    /* not really correct, */
+      }
+      if (session.engineTime == 0) {        /* not really correct, */
             session.engineTime = get_uptime();  /* but it'll work. Sort of. */
     }
 
-    ss = snmp_add(&session,
-                  netsnmp_transport_open_client("snmptrap", session.peername),
-                  NULL, NULL);
+      set_enginetime(session.securityEngineID, session.securityEngineIDLen, session.engineBoots,
+                     session.engineTime, TRUE);
+   }
+
+   ss = snmp_add(&session, netsnmp_transport_open_client("snmptrap", session.peername), NULL, NULL);
     if (ss == NULL) {
         /*
          * diagnose netsnmp_transport_open_client and snmp_add errors with
          * the input netsnmp_session pointer
          */
-        snmp_sess_perror("snmptrap", &session);
+      snmp_sess_perror_exception("snmptrap", &session);
     }
 
 #ifndef NETSNMP_DISABLE_SNMPV1
     if (session.version == SNMP_VERSION_1) {
         if (inform) {
             fprintf(stderr, "Cannot send INFORM as SNMPv1 PDU\n");
         }
         pdu = snmp_pdu_create(SNMP_MSG_TRAP);
         if ( !pdu ) {
             fprintf(stderr, "Failed to create trap PDU\n");
         }
         pdu_in_addr_t = (in_addr_t *) pdu->agent_addr;
         if (arg == argc) {
             fprintf(stderr, "No enterprise oid\n");
-            usage();
+         snmptrap_usage();
         }
         if (argv[arg][0] == 0) {
             pdu->enterprise = (oid *) malloc(sizeof(objid_enterprise));
-            memcpy(pdu->enterprise, objid_enterprise,
-                   sizeof(objid_enterprise));
-            pdu->enterprise_length =
-                sizeof(objid_enterprise) / sizeof(oid);
+         memcpy(pdu->enterprise, objid_enterprise, sizeof(objid_enterprise));
+         pdu->enterprise_length = OID_LENGTH(objid_enterprise);
         } else {
             name_length = MAX_OID_LEN;
             if (!snmp_parse_oid(argv[arg], name, &name_length)) {
-                snmp_perror(argv[arg]);
-                usage();
-                exit(1);
+            snmp_perror_exception(argv[arg]);
+            snmptrap_usage();
             }
             pdu->enterprise = (oid *) malloc(name_length * sizeof(oid));
             memcpy(pdu->enterprise, name, name_length * sizeof(oid));
@@ -264,39 +260,39 @@
         }
         if (++arg >= argc) {
             fprintf(stderr, "Missing agent parameter\n");
-            usage();
+         snmptrap_usage();
         }
         agent = argv[arg];
         if (agent != NULL && strlen(agent) != 0) {
             int ret = netsnmp_gethostbyname_v4(agent, pdu_in_addr_t);
             if (ret < 0) {
                 fprintf(stderr, "unknown host: %s\n", agent);
-                exit(1);
             }
         } else {
             *pdu_in_addr_t = get_myaddr();
         }
         if (++arg == argc) {
             fprintf(stderr, "Missing generic-trap parameter\n");
-            usage();
+         snmptrap_usage();
         }
         trap = argv[arg];
         pdu->trap_type = atoi(trap);
         if (++arg == argc) {
             fprintf(stderr, "Missing specific-trap parameter\n");
-            usage();
+         snmptrap_usage();
         }
         specific = argv[arg];
         pdu->specific_type = atoi(specific);
         if (++arg == argc) {
             fprintf(stderr, "Missing uptime parameter\n");
-            usage();
+         snmptrap_usage();
         }
         description = argv[arg];
-        if (description == NULL || *description == 0)
+      if (description == NULL || *description == 0) {
             pdu->time = get_uptime();
-        else
+      } else {
             pdu->time = atol(description);
+      }
     } else
 #endif
     {
@@ -314,27 +307,24 @@
         pdu = snmp_pdu_create(inform ? SNMP_MSG_INFORM : SNMP_MSG_TRAP2);
         if ( !pdu ) {
             fprintf(stderr, "Failed to create notification PDU\n");
         }
         if (arg == argc) {
             fprintf(stderr, "Missing up-time parameter\n");
-            usage();
+         snmptrap_usage();
         }
         trap = argv[arg];
         if (*trap == 0) {
             sysuptime = get_uptime();
-            sprintf(csysuptime, "%ld", sysuptime);
+         snprintf(csysuptime, sizeof csysuptime, "%ld", sysuptime);
             trap = csysuptime;
         }
-        snmp_add_var(pdu, objid_sysuptime,
-                     sizeof(objid_sysuptime) / sizeof(oid), 't', trap);
+      snmp_add_var(pdu, objid_sysuptime, OID_LENGTH(objid_sysuptime), 't', trap);
         if (++arg == argc) {
             fprintf(stderr, "Missing trap-oid parameter\n");
-            usage();
+         snmptrap_usage();
         }
-        if (snmp_add_var
-            (pdu, objid_snmptrap, sizeof(objid_snmptrap) / sizeof(oid),
-             'o', argv[arg]) != 0) {
-            snmp_perror(argv[arg]);
+      if (snmp_add_var(pdu, objid_snmptrap, OID_LENGTH(objid_snmptrap), 'o', argv[arg]) != 0) {
+         snmp_perror_exception(argv[arg]);
         }
     }
     arg++;
@@ -350,32 +336,35 @@
     while (arg < argc) {
         arg += 3;
         if (arg > argc) {
-            fprintf(stderr, "%s: Missing type/value for variable\n",
-                    argv[arg - 3]);
+         fprintf(stderr, "%s: Missing type/value for variable\n", argv[arg - 3]);
         }
         name_length = MAX_OID_LEN;
         if (!snmp_parse_oid(argv[arg - 3], name, &name_length)) {
-            snmp_perror(argv[arg - 3]);
+         snmp_perror_exception(argv[arg - 3]);
         }
-        if (snmp_add_var
-            (pdu, name, name_length, argv[arg - 2][0],
-             argv[arg - 1]) != 0) {
-            snmp_perror(argv[arg - 3]);
+      if (snmp_add_var(pdu, name, name_length, argv[arg - 2][0], argv[arg - 1]) != 0) {
+         snmp_perror_exception(argv[arg - 3]);
         }
     }
 
-    if (inform)
+   if (inform) {
         status = snmp_synch_response(ss, pdu, &response);
-    else
+   } else {
         status = snmp_send(ss, pdu) == 0;
+   }
     if (status) {
-        snmp_sess_perror(inform ? "snmpinform" : "snmptrap", ss);
-        if (!inform)
+      snmp_sess_perror_exception(inform ? "snmpinform" : "snmptrap", ss);
+      if (!inform) {
             snmp_free_pdu(pdu);
-    } else if (inform)
+      }
+   } else if (inform) {
         snmp_free_pdu(response);
+   }
+
 
     snmp_close(ss);
+
+   clear_net_snmp_library_data();
     SOCK_CLEANUP;
     return exitval;
 }
