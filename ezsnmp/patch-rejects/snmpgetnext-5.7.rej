--- apps/snmpgetnext.c
+++ apps/snmpgetnext.cpp
@@ -25,31 +25,31 @@
 ******************************************************************/
 #include <net-snmp/net-snmp-config.h>
 
 #include <stdlib.h>
 #endif
 #include <unistd.h>
 #endif
 #include <string.h>
 #else
 #include <strings.h>
 #endif
 #include <sys/types.h>
 #include <netinet/in.h>
 #endif
-#include <stdio.h>
 #include <ctype.h>
+#include <stdio.h>
 # include <sys/time.h>
 # include <time.h>
 #else
 #  include <sys/time.h>
 # else
 #  include <time.h>
 # endif
 #endif
 #include <sys/select.h>
 #endif
 #include <netdb.h>
 #endif
 #include <arpa/inet.h>
 #endif
 
@@ -108,35 +102,43 @@
     size_t          name_length;
     int             status;
     int             failures = 0;
+
 
     /*
      * get the common command line arguments 
      */
-    switch (arg = snmp_parse_args(argc, argv, &session, "C:", &optProc)) {
+   switch (arg = snmp_parse_args(argc, argv.get(), &session, "C:", &snmpgetnext_optProc)) {
     case NETSNMP_PARSE_ARGS_ERROR:
+         throw ParseErrorBase("NETSNMP_PARSE_ARGS_ERROR");
+
     case NETSNMP_PARSE_ARGS_SUCCESS_EXIT:
+         throw ParseErrorBase("NETSNMP_PARSE_ARGS_SUCCESS_EXIT");
+
     case NETSNMP_PARSE_ARGS_ERROR_USAGE:
-        usage();
+         throw ParseErrorBase("NETSNMP_PARSE_ARGS_ERROR_USAGE");
+
     default:
         break;
     }
 
     if (arg >= argc) {
-        fprintf(stderr, "Missing object name\n");
-        usage();
+      std::string err_msg = "Missing object name\n";
+      throw GenericErrorBase(err_msg);
     }
     if ((argc - arg) > SNMP_MAX_CMDLINE_OIDS) {
-        fprintf(stderr, "Too many object identifiers specified. ");
-        fprintf(stderr, "Only %d allowed in one request.\n", SNMP_MAX_CMDLINE_OIDS);
-        usage();
+      std::string err_msg =
+          "Too many object identifiers specified. "
+          "Only " +
+          std::to_string(SNMP_MAX_CMDLINE_OIDS) + " allowed in one request.\n";
+      throw GenericErrorBase(err_msg);
     }
 
     /*
      * get the object names 
      */
-    for (; arg < argc; arg++)
+   for (; arg < argc; arg++) {
         names[current_name++] = argv[arg];
-
+   }
 
     /*
      * open an SNMP session 
@@ -153,7 +149,7 @@
         /*
          * diagnose snmp_open errors with the input netsnmp_session pointer 
          */
-        snmp_sess_perror("snmpgetnext", &session);
+      snmp_sess_perror_exception("snmpgetnext", &session);
     }
 
     /*
@@ -166,12 +161,13 @@
     for (count = 0; count < current_name; count++) {
         name_length = MAX_OID_LEN;
         if (snmp_parse_oid(names[count], name, &name_length) == NULL) {
-            snmp_perror(names[count]);
+         snmp_perror_exception(names[count]);
             failures++;
-        } else
+      } else {
             snmp_add_null_var(pdu, name, name_length);
     }
+   }
     if (failures) {
     }
 
     /*
