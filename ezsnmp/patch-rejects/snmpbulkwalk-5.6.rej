--- apps/snmpbulkwalk.c	2025-08-14 21:46:32.691460700 -0700
+++ snmpbulkwalk.cpp	2025-08-14 21:04:27.424090400 -0700
@@ -27,31 +28,31 @@
 **********************************************************************/
 #include <net-snmp/net-snmp-config.h>
 
 #include <stdlib.h>
 #endif
 #include <unistd.h>
 #endif
 #include <string.h>
 #else
 #include <strings.h>
 #endif
 #include <sys/types.h>
 #include <netinet/in.h>
 #endif
 # include <sys/time.h>
 # include <time.h>
 #else
 #  include <sys/time.h>
 # else
 #  include <time.h>
 # endif
 #endif
 #include <sys/select.h>
 #endif
-#include <stdio.h>
 #include <ctype.h>
+#include <stdio.h>
 #include <netdb.h>
 #endif
 #include <arpa/inet.h>
 #endif
 
@@ -192,25 +198,28 @@
     int             running;
     int             status = STAT_ERROR;
     int             check;
+
 
     netsnmp_ds_register_config(ASN_BOOLEAN, "snmpwalk", "includeRequested",
-			       NETSNMP_DS_APPLICATION_ID, 
-			       NETSNMP_DS_WALK_INCLUDE_REQUESTED);
-    netsnmp_ds_register_config(ASN_BOOLEAN, "snmpwalk", "printStatistics",
-			       NETSNMP_DS_APPLICATION_ID, 
+                              NETSNMP_DS_APPLICATION_ID, NETSNMP_DS_WALK_INCLUDE_REQUESTED);
+   netsnmp_ds_register_config(ASN_BOOLEAN, "snmpwalk", "printStatistics", NETSNMP_DS_APPLICATION_ID,
 			       NETSNMP_DS_WALK_PRINT_STATISTICS);
     netsnmp_ds_register_config(ASN_BOOLEAN, "snmpwalk", "dontCheckOrdering",
-			       NETSNMP_DS_APPLICATION_ID,
-			       NETSNMP_DS_WALK_DONT_CHECK_LEXICOGRAPHIC);
+                              NETSNMP_DS_APPLICATION_ID, NETSNMP_DS_WALK_DONT_CHECK_LEXICOGRAPHIC);
 
     /*
      * get the common command line arguments 
      */
-    switch (arg = snmp_parse_args(argc, argv, &session, "C:", optProc)) {
+   switch (arg = snmp_parse_args(argc, argv.get(), &session, "C:", snmpbulkwalk_optProc)) {
     case NETSNMP_PARSE_ARGS_ERROR:
+         throw ParseErrorBase("NETSNMP_PARSE_ARGS_ERROR");
+
     case NETSNMP_PARSE_ARGS_SUCCESS_EXIT:
+         throw ParseErrorBase("NETSNMP_PARSE_ARGS_SUCCESS_EXIT");
+
     case NETSNMP_PARSE_ARGS_ERROR_USAGE:
-        usage();
+         throw ParseErrorBase("NETSNMP_PARSE_ARGS_ERROR_USAGE");
+
     default:
         break;
     }
@@ -228,17 +234,17 @@
          */
         rootlen = MAX_OID_LEN;
         if (snmp_parse_oid(argv[arg], root, &rootlen) == NULL) {
-            snmp_perror(argv[arg]);
+         snmp_perror_exception(argv[arg]);
+         return parse_results(return_vector);
         }
     } else {
         /*
          * use default value 
          */
-        memmove(root, objid_mib, sizeof(objid_mib));
-        rootlen = sizeof(objid_mib) / sizeof(oid);
+      memmove(root, snmpbulkwalk_objid_mib, sizeof(snmpbulkwalk_objid_mib));
+      rootlen = OID_LENGTH(snmpbulkwalk_objid_mib);
     }
 
-
     /*
      * open an SNMP session 
      */
@@ -249,7 +253,8 @@
         /*
          * diagnose snmp_open errors with the input netsnmp_session pointer 
          */
-        snmp_sess_perror("snmpbulkwalk", &session);
+      snmp_sess_perror_exception("snmpbulkwalk", &session);
+      return parse_results(return_vector);
     }
 
     /*
