--- net-snmp-master/apps/snmpget.c 2024-09-06 10:48:16
+++ ../src/snmpget.cpp             2024-11-11 21:45:20
@@ -1,3 +1,4 @@
+/* straight copy from https://github.com/net-snmp/net-snmp/tree/master/apps */
 /*
  * snmpget.c - send snmp GET requests to a network entity.
  *
@@ -40,8 +41,8 @@
 #ifdef HAVE_NETINET_IN_H
 #include <netinet/in.h>
 #endif
-#include <stdio.h>
 #include <ctype.h>
+#include <stdio.h>
 #ifdef TIME_WITH_SYS_TIME
 # include <sys/time.h>
 # include <time.h>
@@ -62,15 +63,17 @@
 #include <arpa/inet.h>
 #endif
 
+#include <net-snmp/net-snmp-includes.h>
 #include <net-snmp/utilities.h>
 
-#include <net-snmp/net-snmp-includes.h>
-
 #define NETSNMP_DS_APP_DONT_FIX_PDUS 0
 
-static void
-optProc(int argc, char *const *argv, int opt)
-{
+#include <stdexcept>
+
+#include "helpers.h"
+#include "snmpget.h"
+
+void snmpget_optProc(int argc, char *const *argv, int opt) {
     switch (opt) {
     case 'C':
         while (*optarg) {
@@ -80,31 +83,29 @@
 					  NETSNMP_DS_APP_DONT_FIX_PDUS);
                 break;
             default:
-                fprintf(stderr, "Unknown flag passed to -C: %c\n",
-                        optarg[-1]);
-                exit(1);
+                  std::string err_msg =
+                      "Unknown flag passed to -C: " + std::string(1, optarg[-1]) + "\n";
+                  throw std::runtime_error(err_msg);
             }
         }
         break;
     }
 }
 
-void
-usage(void)
-{
+void snmpget_usage(void) {
     fprintf(stderr, "USAGE: snmpget ");
     snmp_parse_args_usage(stderr);
     fprintf(stderr, " OID [OID]...\n\n");
     snmp_parse_args_descriptions(stderr);
-    fprintf(stderr,
-            "  -C APPOPTS\t\tSet various application specific behaviours:\n");
-    fprintf(stderr,
-            "\t\t\t  f:  do not fix errors and retry the request\n");
+   fprintf(stderr, "  -C APPOPTS\t\tSet various application specific behaviours:\n");
+   fprintf(stderr, "\t\t\t  f:  do not fix errors and retry the request\n");
 }
 
-int
-main(int argc, char *argv[])
-{
+std::vector<Result> snmpget(std::vector<std::string> const &args) {
+   int argc;
+   std::unique_ptr<char *[]> argv = create_argv(args, argc);
+   std::vector<std::string> return_vector;
+
     netsnmp_session session, *ss;
     netsnmp_pdu    *pdu;
     netsnmp_pdu    *response;
@@ -117,43 +118,44 @@
     size_t          name_length;
     int             status;
     int             failures = 0;
-    int             exitval = 1;
 
     SOCK_STARTUP;
 
     /*
      * get the common command line arguments 
      */
-    switch (arg = snmp_parse_args(argc, argv, &session, "C:", optProc)) {
+   switch (arg = snmp_parse_args(argc, argv.get(), &session, "C:", snmpget_optProc)) {
     case NETSNMP_PARSE_ARGS_ERROR:
-        goto out;
+         throw std::runtime_error("NETSNMP_PARSE_ARGS_ERROR");
+
     case NETSNMP_PARSE_ARGS_SUCCESS_EXIT:
-        exitval = 0;
-        goto out;
+         throw std::runtime_error("NETSNMP_PARSE_ARGS_SUCCESS_EXIT");
+
     case NETSNMP_PARSE_ARGS_ERROR_USAGE:
-        usage();
-        goto out;
+         throw std::runtime_error("NETSNMP_PARSE_ARGS_ERROR_USAGE");
+
     default:
         break;
     }
 
     if (arg >= argc) {
-        fprintf(stderr, "Missing object name\n");
-        usage();
-        goto out;
+      std::string err_msg = "Missing object name\n";
+      throw std::runtime_error(err_msg);
     }
     if ((argc - arg) > SNMP_MAX_CMDLINE_OIDS) {
-        fprintf(stderr, "Too many object identifiers specified. ");
-        fprintf(stderr, "Only %d allowed in one request.\n", SNMP_MAX_CMDLINE_OIDS);
-        usage();
-        goto out;
+      std::string err_msg =
+          "Too many object identifiers specified. "
+          "Only " +
+          std::to_string(SNMP_MAX_CMDLINE_OIDS) + " allowed in one request.\n";
+      throw std::runtime_error(err_msg);
     }
 
     /*
      * get the object names 
      */
-    for (; arg < argc; arg++)
+   for (; arg < argc; arg++) {
         names[current_name++] = argv[arg];
+   }
 
     /*
      * Open an SNMP session.
@@ -163,11 +165,9 @@
         /*
          * diagnose snmp_open errors with the input netsnmp_session pointer 
          */
-        snmp_sess_perror("snmpget", &session);
-        goto out;
+      snmp_sess_perror_exception("snmpget", &session);
     }
 
-
     /*
      * Create PDU for GET request and add object names to request.
      */
@@ -175,18 +175,18 @@
     for (count = 0; count < current_name; count++) {
         name_length = MAX_OID_LEN;
         if (!snmp_parse_oid(names[count], name, &name_length)) {
-            snmp_perror(names[count]);
+         snmp_perror_exception(names[count]);
             failures++;
-        } else
+      } else {
             snmp_add_null_var(pdu, name, name_length);
     }
+   }
     if (failures) {
         snmp_free_pdu(pdu);
-        goto close_session;
+      snmp_close(ss);
+      return parse_results(return_vector);
     }
 
-    exitval = 0;
-
     /*
      * Perform the request.
      *
@@ -197,32 +197,39 @@
     status = snmp_synch_response(ss, pdu, &response);
     if (status == STAT_SUCCESS) {
         if (response->errstat == SNMP_ERR_NOERROR) {
-            for (vars = response->variables; vars;
-                 vars = vars->next_variable)
-                print_variable(vars->name, vars->name_length, vars);
-
+         for (vars = response->variables; vars; vars = vars->next_variable) {
+            auto str_value = print_variable_to_string(vars->name, vars->name_length, vars);
+            return_vector.push_back(str_value);
+         }
         } else {
-            fprintf(stderr, "Error in packet\nReason: %s\n",
-                    snmp_errstring(response->errstat));
+         std::string err_msg =
+             "Error in packet\nReason: " + std::string(snmp_errstring(response->errstat)) + "\n";
 
             if (response->errindex != 0) {
-                fprintf(stderr, "Failed object: ");
-                for (count = 1, vars = response->variables;
-                     vars && count != response->errindex;
+            err_msg = err_msg + "Failed object: ";
+            for (count = 1, vars = response->variables; vars && count != response->errindex;
                      vars = vars->next_variable, count++)
                     /*EMPTY*/;
                 if (vars) {
-                    fprint_objid(stderr, vars->name, vars->name_length);
+               // Create a buffer for capturing output. 256 comes from the max
+               // inside fprint_objid
+               std::vector<char> buffer(256);
+               buffer.clear();
+
+               // Open the buffer as a file
+               FILE *f1 = fmemopen(buffer.data(), buffer.size(), "w");
+
+               fprint_objid(f1, vars->name, vars->name_length);
+               fclose(f1);
+               err_msg = err_msg + std::string(buffer.data());
 		}
-                fprintf(stderr, "\n");
+            err_msg = err_msg + "\n";
             }
-            exitval = 2;
 
             /*
              * retry if the errored variable was successfully removed 
              */
-            if (!netsnmp_ds_get_boolean(NETSNMP_DS_APPLICATION_ID,
-					NETSNMP_DS_APP_DONT_FIX_PDUS)) {
+         if (!netsnmp_ds_get_boolean(NETSNMP_DS_APPLICATION_ID, NETSNMP_DS_APP_DONT_FIX_PDUS)) {
                 pdu = snmp_fix_pdu(response, SNMP_MSG_GET);
                 snmp_free_pdu(response);
                 response = NULL;
@@ -230,28 +237,22 @@
                     goto retry;
 		}
             }
-        }                       /* endif -- SNMP_ERR_NOERROR */
+         throw std::runtime_error(err_msg);
 
+      } /* endif -- SNMP_ERR_NOERROR */
     } else if (status == STAT_TIMEOUT) {
-        fprintf(stderr, "Timeout: No Response from %s.\n",
-                session.peername);
-        exitval = 1;
-
+      std::string err_msg = "Timeout: No Response from " + std::string(session.peername) + ".\n";
+      throw std::runtime_error(err_msg);
     } else {                    /* status == STAT_ERROR */
-        snmp_sess_perror("snmpget", ss);
-        exitval = 1;
+      snmp_sess_perror_exception("snmpget", ss);
 
     }                           /* endif -- STAT_SUCCESS */
 
-
-    if (response)
+   if (response) {
         snmp_free_pdu(response);
+   }
 
-close_session:
-    snmp_close(ss);
-
-out:
     netsnmp_cleanup_session(&session);
     SOCK_CLEANUP;
-    return exitval;
+   return parse_results(return_vector);
 }                               /* end main() */
