--- net-snmp-master/apps/snmpwalk.c 2024-09-06 10:48:16
+++ ../src/snmpwalk.cpp             2024-11-12 21:06:24
@@ -1,3 +1,4 @@
+/* straight copy from https://github.com/net-snmp/net-snmp/tree/master/apps */
 /*
  * snmpwalk.c - send snmp GETNEXT requests to a network entity, walking a
  * subtree.
@@ -76,30 +77,33 @@
 
 char           *end_name = NULL;
 
-void
-usage(void)
-{
+#include <stdexcept>
+
+#include "helpers.h"
+#include "snmpwalk.h"
+
+void snmpwalk_usage(void) {
     fprintf(stderr, "USAGE: snmpwalk ");
     snmp_parse_args_usage(stderr);
     fprintf(stderr, " [OID]\n\n");
     snmp_parse_args_descriptions(stderr);
-    fprintf(stderr,
-            "  -C APPOPTS\t\tSet various application specific behaviours:\n");
+   fprintf(stderr, "  -C APPOPTS\t\tSet various application specific behaviours:\n");
     fprintf(stderr, "\t\t\t  p:  print the number of variables found\n");
     fprintf(stderr, "\t\t\t  i:  include given OID in the search range\n");
-    fprintf(stderr, "\t\t\t  I:  don't include the given OID, even if no results are returned\n");
     fprintf(stderr,
-            "\t\t\t  c:  do not check returned OIDs are increasing\n");
-    fprintf(stderr,
-            "\t\t\t  t:  Display wall-clock time to complete the walk\n");
-    fprintf(stderr,
-            "\t\t\t  T:  Display wall-clock time to complete each request\n");
+           "\t\t\t  I:  don't include the given OID, even if no results "
+           "are returned\n");
+   fprintf(stderr, "\t\t\t  c:  do not check returned OIDs are increasing\n");
+   fprintf(stderr, "\t\t\t  t:  Display wall-clock time to complete the walk\n");
+   fprintf(stderr, "\t\t\t  T:  Display wall-clock time to complete each request\n");
     fprintf(stderr, "\t\t\t  E {OID}:  End the walk at the specified OID\n");
 }
 
-void
-snmp_get_and_print(netsnmp_session * ss, oid * theoid, size_t theoid_len)
-{
+std::vector<std::string> snmpwalk_snmp_get_and_print(netsnmp_session *ss,
+                                                     oid *theoid,
+                                                     size_t theoid_len) {
+   std::vector<std::string> str_values;
+
     netsnmp_pdu    *pdu, *response;
     netsnmp_variable_list *vars;
     int             status;
@@ -111,17 +115,18 @@
     if (status == STAT_SUCCESS && response->errstat == SNMP_ERR_NOERROR) {
         for (vars = response->variables; vars; vars = vars->next_variable) {
             numprinted++;
-            print_variable(vars->name, vars->name_length, vars);
+         auto str_value = print_variable_to_string(vars->name, vars->name_length, vars);
+         str_values.push_back(str_value);
         }
     }
     if (response) {
         snmp_free_pdu(response);
     }
+
+   return str_values;
 }
 
-static void
-optProc(int argc, char *const *argv, int opt)
-{
+void snmpwalk_optProc(int argc, char *const *argv, int opt) {
     switch (opt) {
     case 'C':
         while (*optarg) {
@@ -161,18 +166,20 @@
                 break;
                 
             default:
-                fprintf(stderr, "Unknown flag passed to -C: %c\n",
-                        optarg[-1]);
-                exit(1);
+                  std::string err_msg =
+                      "Unknown flag passed to -C: " + std::string(1, optarg[-1]) + "\n";
+                  throw std::runtime_error(err_msg);
             }
         }
         break;
     }
 }
 
-int
-main(int argc, char *argv[])
-{
+std::vector<Result> snmpwalk(std::vector<std::string> const &args) {
+   int argc;
+   std::unique_ptr<char *[]> argv = create_argv(args, argc);
+   std::vector<std::string> return_vector;
+
     netsnmp_session session, *ss;
     netsnmp_pdu    *pdu, *response;
     netsnmp_variable_list *vars;
@@ -187,47 +194,41 @@
     int             running;
     int             status = STAT_ERROR;
     int             check;
-    int             exitval = 1;
     struct timeval  tv1, tv2, tv_a, tv_b;
 
     SOCK_STARTUP;
 
     netsnmp_ds_register_config(ASN_BOOLEAN, "snmpwalk", "includeRequested",
-			       NETSNMP_DS_APPLICATION_ID, 
-			       NETSNMP_DS_WALK_INCLUDE_REQUESTED);
+                              NETSNMP_DS_APPLICATION_ID, NETSNMP_DS_WALK_INCLUDE_REQUESTED);
 
     netsnmp_ds_register_config(ASN_BOOLEAN, "snmpwalk", "excludeRequested",
-			       NETSNMP_DS_APPLICATION_ID, 
-			       NETSNMP_DS_WALK_DONT_GET_REQUESTED);
+                              NETSNMP_DS_APPLICATION_ID, NETSNMP_DS_WALK_DONT_GET_REQUESTED);
 
-    netsnmp_ds_register_config(ASN_BOOLEAN, "snmpwalk", "printStatistics",
-			       NETSNMP_DS_APPLICATION_ID, 
+   netsnmp_ds_register_config(ASN_BOOLEAN, "snmpwalk", "printStatistics", NETSNMP_DS_APPLICATION_ID,
 			       NETSNMP_DS_WALK_PRINT_STATISTICS);
 
     netsnmp_ds_register_config(ASN_BOOLEAN, "snmpwalk", "dontCheckOrdering",
-			       NETSNMP_DS_APPLICATION_ID,
-			       NETSNMP_DS_WALK_DONT_CHECK_LEXICOGRAPHIC);
+                              NETSNMP_DS_APPLICATION_ID, NETSNMP_DS_WALK_DONT_CHECK_LEXICOGRAPHIC);
 
-    netsnmp_ds_register_config(ASN_BOOLEAN, "snmpwalk", "timeResults",
-                               NETSNMP_DS_APPLICATION_ID,
+   netsnmp_ds_register_config(ASN_BOOLEAN, "snmpwalk", "timeResults", NETSNMP_DS_APPLICATION_ID,
                                NETSNMP_DS_WALK_TIME_RESULTS);
 
     netsnmp_ds_register_config(ASN_BOOLEAN, "snmpwalk", "timeResultsSingle",
-                               NETSNMP_DS_APPLICATION_ID,
-                               NETSNMP_DS_WALK_TIME_RESULTS_SINGLE);
+                              NETSNMP_DS_APPLICATION_ID, NETSNMP_DS_WALK_TIME_RESULTS_SINGLE);
 
     /*
      * get the common command line arguments 
      */
-    switch (arg = snmp_parse_args(argc, argv, &session, "C:", optProc)) {
+   switch (arg = snmp_parse_args(argc, argv.get(), &session, "C:", snmpwalk_optProc)) {
     case NETSNMP_PARSE_ARGS_ERROR:
-        goto out;
+         throw std::runtime_error("NETSNMP_PARSE_ARGS_ERROR");
+
     case NETSNMP_PARSE_ARGS_SUCCESS_EXIT:
-        exitval = 0;
-        goto out;
+         throw std::runtime_error("NETSNMP_PARSE_ARGS_SUCCESS_EXIT");
+
     case NETSNMP_PARSE_ARGS_ERROR_USAGE:
-        usage();
-        goto out;
+         throw std::runtime_error("NETSNMP_PARSE_ARGS_ERROR_USAGE");
+
     default:
         break;
     }
@@ -241,8 +242,7 @@
          */
         rootlen = MAX_OID_LEN;
         if (snmp_parse_oid(argv[arg], root, &rootlen) == NULL) {
-            snmp_perror(argv[arg]);
-            goto out;
+         snmp_perror_exception(argv[arg]);
         }
     } else {
         /*
@@ -260,8 +260,7 @@
     if ( end_name ) {
         end_len = MAX_OID_LEN;
         if (snmp_parse_oid(end_name, end_oid, &end_len) == NULL) {
-            snmp_perror(end_name);
-            goto out;
+         snmp_perror_exception(end_name);
         }
     } else {
         memmove(end_oid, root, rootlen*sizeof(oid));
@@ -277,8 +276,7 @@
         /*
          * diagnose snmp_open errors with the input netsnmp_session pointer 
          */
-        snmp_sess_perror("snmpwalk", &session);
-        goto out;
+      snmp_sess_perror_exception("snmpwalk", &session);
     }
 
     /*
@@ -290,16 +288,19 @@
     running = 1;
 
     check =
-        !netsnmp_ds_get_boolean(NETSNMP_DS_APPLICATION_ID,
-                        NETSNMP_DS_WALK_DONT_CHECK_LEXICOGRAPHIC);
+       !netsnmp_ds_get_boolean(NETSNMP_DS_APPLICATION_ID, NETSNMP_DS_WALK_DONT_CHECK_LEXICOGRAPHIC);
     if (netsnmp_ds_get_boolean(NETSNMP_DS_APPLICATION_ID, NETSNMP_DS_WALK_INCLUDE_REQUESTED)) {
-        snmp_get_and_print(ss, root, rootlen);
+      auto retval = snmpwalk_snmp_get_and_print(ss, root, rootlen);
+
+      for (auto const &item : retval) {
+         return_vector.push_back(item);
     }
+   }
 
-    if (netsnmp_ds_get_boolean(NETSNMP_DS_APPLICATION_ID,
-                               NETSNMP_DS_WALK_TIME_RESULTS))
+   if (netsnmp_ds_get_boolean(NETSNMP_DS_APPLICATION_ID, NETSNMP_DS_WALK_TIME_RESULTS)) {
         netsnmp_get_monotonic_clock(&tv1);
-    exitval = 0;
+   }
+
     while (running) {
         /*
          * create PDU for GETNEXT request and add object name to request 
@@ -310,20 +311,21 @@
         /*
          * do the request 
          */
-        if (netsnmp_ds_get_boolean(NETSNMP_DS_APPLICATION_ID, NETSNMP_DS_WALK_TIME_RESULTS_SINGLE))
+      if (netsnmp_ds_get_boolean(NETSNMP_DS_APPLICATION_ID, NETSNMP_DS_WALK_TIME_RESULTS_SINGLE)) {
             netsnmp_get_monotonic_clock(&tv_a);
+      }
         status = snmp_synch_response(ss, pdu, &response);
         if (status == STAT_SUCCESS) {
-            if (netsnmp_ds_get_boolean(NETSNMP_DS_APPLICATION_ID, NETSNMP_DS_WALK_TIME_RESULTS_SINGLE))
+         if (netsnmp_ds_get_boolean(NETSNMP_DS_APPLICATION_ID,
+                                    NETSNMP_DS_WALK_TIME_RESULTS_SINGLE)) {
                 netsnmp_get_monotonic_clock(&tv_b);
+         }
             if (response->errstat == SNMP_ERR_NOERROR) {
                 /*
                  * check resulting variables 
                  */
-                for (vars = response->variables; vars;
-                     vars = vars->next_variable) {
-                    if (snmp_oid_compare(end_oid, end_len,
-                                         vars->name, vars->name_length) <= 0) {
+            for (vars = response->variables; vars; vars = vars->next_variable) {
+               if (snmp_oid_compare(end_oid, end_len, vars->name, vars->name_length) <= 0) {
                         /*
                          * not part of this subtree 
                          */
@@ -331,40 +333,54 @@
                         continue;
                     }
                     numprinted++;
-                    if (netsnmp_ds_get_boolean(NETSNMP_DS_APPLICATION_ID, NETSNMP_DS_WALK_TIME_RESULTS_SINGLE))
+               if (netsnmp_ds_get_boolean(NETSNMP_DS_APPLICATION_ID,
+                                          NETSNMP_DS_WALK_TIME_RESULTS_SINGLE)) {
                         fprintf(stdout, "%f s: ",  
                                 (double) (tv_b.tv_usec - tv_a.tv_usec)/1000000 +
                                 (double) (tv_b.tv_sec - tv_a.tv_sec));
-                    print_variable(vars->name, vars->name_length, vars);
-                    if ((vars->type != SNMP_ENDOFMIBVIEW) &&
-                        (vars->type != SNMP_NOSUCHOBJECT) &&
+               }
+
+               auto str_value = print_variable_to_string(vars->name, vars->name_length, vars);
+               return_vector.push_back(str_value);
+
+               if ((vars->type != SNMP_ENDOFMIBVIEW) && (vars->type != SNMP_NOSUCHOBJECT) &&
                         (vars->type != SNMP_NOSUCHINSTANCE)) {
                         /*
                          * not an exception value 
                          */
-                        if (check
-                            && snmp_oid_compare(name, name_length,
-                                                vars->name,
-                                                vars->name_length) >= 0) {
-                            fflush(stdout);
-                            fprintf(stderr, "Error: OID not increasing: ");
-                            fprint_objid(stderr, name, name_length);
-                            fprintf(stderr, " >= ");
-                            fprint_objid(stderr, vars->name,
-                                         vars->name_length);
-                            fprintf(stderr, "\n");
-                            running = 0;
-                            exitval = 1;
+                  if (check &&
+                      snmp_oid_compare(name, name_length, vars->name, vars->name_length) >= 0) {
+                     std::string err_msg = "Error: OID not increasing: ";
+
+                     // Create a buffer for capturing output. 256 comes from the max
+                     // inside fprint_objid
+                     std::vector<char> buffer(256);
+                     buffer.clear();
+
+                     // Open the buffer as a file
+                     FILE *f1 = fmemopen(buffer.data(), buffer.size(), "w");
+
+                     fprint_objid(f1, name, name_length);
+                     fclose(f1);
+
+                     err_msg = err_msg + std::string(buffer.data()) + " >= ";
+
+                     buffer.clear();
+                     FILE *f2 = fmemopen(buffer.data(), buffer.size(), "w");
+                     fprint_objid(f2, vars->name, vars->name_length);
+                     fclose(f2);
+                     err_msg = err_msg + std::string(buffer.data()) + "\n";
+                     throw std::runtime_error(err_msg);
                         }
-                        memmove((char *) name, (char *) vars->name,
-                                vars->name_length * sizeof(oid));
+                  memmove((char *)name, (char *)vars->name, vars->name_length * sizeof(oid));
                         name_length = vars->name_length;
-                    } else
+               } else {
                         /*
                          * an exception value, so stop 
                          */
                         running = 0;
                 }
+            }
             } else {
                 /*
                  * error in response, print it 
@@ -373,38 +389,46 @@
                 if (response->errstat == SNMP_ERR_NOSUCHNAME) {
                     printf("End of MIB\n");
                 } else {
-                    fprintf(stderr, "Error in packet.\nReason: %s\n",
-                            snmp_errstring(response->errstat));
+               std::string err_msg =
+                   "Error in packet\nReason: " + std::string(snmp_errstring(response->errstat)) +
+                   "\n";
+
                     if (response->errindex != 0) {
-                        fprintf(stderr, "Failed object: ");
-                        for (count = 1, vars = response->variables;
-                             vars && count != response->errindex;
+                  err_msg = err_msg + "Failed object: ";
+                  for (count = 1, vars = response->variables; vars && count != response->errindex;
                              vars = vars->next_variable, count++)
                             /*EMPTY*/;
-                        if (vars)
-                            fprint_objid(stderr, vars->name,
-                                         vars->name_length);
-                        fprintf(stderr, "\n");
+                  if (vars) {
+                     // Create a buffer for capturing output. 256 comes from the max
+                     // inside fprint_objid
+                     std::vector<char> buffer(256);
+                     buffer.clear();
+
+                     // Open the buffer as a file
+                     FILE *f1 = fmemopen(buffer.data(), buffer.size(), "w");
+
+                     fprint_objid(f1, vars->name, vars->name_length);
+                     fclose(f1);
+                     err_msg = err_msg + std::string(buffer.data());
                     }
-                    exitval = 2;
+                  err_msg = err_msg + "\n";
+                  throw std::runtime_error(err_msg);
                 }
             }
+         }
         } else if (status == STAT_TIMEOUT) {
-            fprintf(stderr, "Timeout: No Response from %s\n",
-                    session.peername);
-            running = 0;
-            exitval = 1;
+         std::string err_msg = "Timeout: No Response from " + std::string(session.peername) + ".\n";
+         throw std::runtime_error(err_msg);
         } else {                /* status == STAT_ERROR */
-            snmp_sess_perror("snmpwalk", ss);
-            running = 0;
-            exitval = 1;
+         snmp_sess_perror_exception("snmpwalk", ss);
         }
-        if (response)
+      if (response) {
             snmp_free_pdu(response);
     }
-    if (netsnmp_ds_get_boolean(NETSNMP_DS_APPLICATION_ID,
-                               NETSNMP_DS_WALK_TIME_RESULTS))
+   }
+   if (netsnmp_ds_get_boolean(NETSNMP_DS_APPLICATION_ID, NETSNMP_DS_WALK_TIME_RESULTS)) {
         netsnmp_get_monotonic_clock(&tv2);
+   }
 
     if (numprinted == 0 && status == STAT_SUCCESS) {
         /*
@@ -413,24 +437,24 @@
          * for get measure. 
          */
         if (!netsnmp_ds_get_boolean(NETSNMP_DS_APPLICATION_ID, NETSNMP_DS_WALK_DONT_GET_REQUESTED)) {
-            snmp_get_and_print(ss, root, rootlen);
+         auto retval = snmpwalk_snmp_get_and_print(ss, root, rootlen);
+
+         for (auto const &item : retval) {
+            return_vector.push_back(item);
         }
     }
+   }
     snmp_close(ss);
 
-    if (netsnmp_ds_get_boolean(NETSNMP_DS_APPLICATION_ID,
-                               NETSNMP_DS_WALK_PRINT_STATISTICS)) {
+   if (netsnmp_ds_get_boolean(NETSNMP_DS_APPLICATION_ID, NETSNMP_DS_WALK_PRINT_STATISTICS)) {
         printf("Variables found: %d\n", numprinted);
     }
-    if (netsnmp_ds_get_boolean(NETSNMP_DS_APPLICATION_ID,
-                               NETSNMP_DS_WALK_TIME_RESULTS)) {
+   if (netsnmp_ds_get_boolean(NETSNMP_DS_APPLICATION_ID, NETSNMP_DS_WALK_TIME_RESULTS)) {
         fprintf (stderr, "Total traversal time = %f seconds\n",
-                 (double) (tv2.tv_usec - tv1.tv_usec)/1000000 +
-                 (double) (tv2.tv_sec - tv1.tv_sec));
+              (double)(tv2.tv_usec - tv1.tv_usec) / 1000000 + (double)(tv2.tv_sec - tv1.tv_sec));
     }
 
-out:
     netsnmp_cleanup_session(&session);
     SOCK_CLEANUP;
-    return exitval;
+   return parse_results(return_vector);
 }
