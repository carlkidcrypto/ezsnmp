--- net-snmp-master/apps/snmptrap.c 2024-09-06 10:48:16
+++ ../src/snmptrap.cpp             2024-11-11 16:21:26
@@ -1,3 +1,4 @@
+/* straight copy from https://github.com/net-snmp/net-snmp/tree/master/apps */
 /*
  * snmptrap.c - send snmp traps to a network entity.
  *
@@ -71,34 +72,30 @@
 oid             objid_snmptrap[] = { 1, 3, 6, 1, 6, 3, 1, 1, 4, 1, 0 };
 int             inform = 0;
 
-void
-usage(void)
-{
+#include <stdexcept>
+
+#include "helpers.h"
+#include "snmptrap.h"
+
+void snmptrap_usage(void) {
     fprintf(stderr, "USAGE: %s ", inform ? "snmpinform" : "snmptrap");
     snmp_parse_args_usage(stderr);
     fprintf(stderr, " TRAP-PARAMETERS\n\n");
     snmp_parse_args_descriptions(stderr);
-    fprintf(stderr,
-            "  -C APPOPTS\t\tSet various application specific behaviour:\n");
+   fprintf(stderr, "  -C APPOPTS\t\tSet various application specific behaviour:\n");
     fprintf(stderr, "\t\t\t  i:  send an INFORM instead of a TRAP\n");
     fprintf(stderr,
-            "\n  -v 1 TRAP-PARAMETERS:\n\t enterprise-oid agent trap-type specific-type uptime [OID TYPE VALUE]...\n");
+           "\n  -v 1 TRAP-PARAMETERS:\n\t enterprise-oid agent "
+           "trap-type specific-type uptime [OID TYPE VALUE]...\n");
     fprintf(stderr, "  or\n");
-    fprintf(stderr,
-            "  -v 2 TRAP-PARAMETERS:\n\t uptime trapoid [OID TYPE VALUE] ...\n");
+   fprintf(stderr, "  -v 2 TRAP-PARAMETERS:\n\t uptime trapoid [OID TYPE VALUE] ...\n");
 }
 
-int
-snmp_input(int operation,
-           netsnmp_session * session,
-           int reqid, netsnmp_pdu *pdu, void *magic)
-{
+int snmp_input(int operation, netsnmp_session *session, int reqid, netsnmp_pdu *pdu, void *magic) {
     return 1;
 }
 
-static void
-optProc(int argc, char *const *argv, int opt)
-{
+void snmptrap_optProc(int argc, char *const *argv, int opt) {
     switch (opt) {
     case 'C':
         while (*optarg) {
@@ -107,18 +104,19 @@
                 inform = 1;
                 break;
             default:
-                fprintf(stderr,
-                        "Unknown flag passed to -C: %c\n", optarg[-1]);
-                exit(1);
+                  std::string err_msg =
+                      "Unknown flag passed to -C: " + std::string(1, optarg[-1]) + "\n";
+                  throw std::runtime_error(err_msg);
             }
         }
         break;
     }
 }
 
-int
-main(int argc, char *argv[])
-{
+int snmptrap(std::vector<std::string> const &args) {
+   int argc;
+   std::unique_ptr<char *[]> argv = create_argv(args, argc);
+
     netsnmp_session session, *ss = NULL;
     netsnmp_pdu    *pdu, *response;
     oid             name[MAX_OID_LEN];
@@ -136,26 +134,28 @@
     SOCK_STARTUP;
 
     prognam = strrchr(argv[0], '/');
-    if (prognam)
+   if (prognam) {
         prognam++;
-    else
+   } else {
         prognam = argv[0];
+   }
 
     putenv(strdup("POSIXLY_CORRECT=1"));
 
-    if (strcmp(prognam, "snmpinform") == 0)
+   if (strcmp(prognam, "snmpinform") == 0) {
         inform = 1;
+   }
 
     /** parse args (also initializes session) */
-    switch (arg = snmp_parse_args(argc, argv, &session, "C:", optProc)) {
+   switch (arg = snmp_parse_args(argc, argv.get(), &session, "C:", snmptrap_optProc)) {
     case NETSNMP_PARSE_ARGS_ERROR:
-        goto out;
+         throw std::runtime_error("NETSNMP_PARSE_ARGS_ERROR");
+
     case NETSNMP_PARSE_ARGS_SUCCESS_EXIT:
-        exitval = 0;
-        goto out;
+         throw std::runtime_error("NETSNMP_PARSE_ARGS_SUCCESS_EXIT");
+
     case NETSNMP_PARSE_ARGS_ERROR_USAGE:
-        usage();
-        goto out;
+         throw std::runtime_error("NETSNMP_PARSE_ARGS_ERROR_USAGE");
     default:
         break;
     }
@@ -171,10 +171,8 @@
 
     /* if we don't have a contextEngineID set via command line
        arguments, use our internal engineID as the context. */
-    if (session.contextEngineIDLen == 0 ||
-        session.contextEngineID == NULL) {
-        session.contextEngineID =
-            snmpv3_generate_engineID(&session.contextEngineIDLen);
+   if (session.contextEngineIDLen == 0 || session.contextEngineID == NULL) {
+      session.contextEngineID = snmpv3_generate_engineID(&session.contextEngineIDLen);
     }
 
     if (session.version == SNMP_VERSION_3 && !inform) {
@@ -198,10 +196,8 @@
         /*
          * pick our own engineID 
          */
-        if (session.securityEngineIDLen == 0 ||
-            session.securityEngineID == NULL) {
-            session.securityEngineID =
-                snmpv3_generate_engineID(&session.securityEngineIDLen);
+      if (session.securityEngineIDLen == 0 || session.securityEngineID == NULL) {
+         session.securityEngineID = snmpv3_generate_engineID(&session.securityEngineIDLen);
         }
 
         /*
@@ -210,24 +206,24 @@
          * boots and time...  I'll cause a not-in-time-window report to
          * be sent back to this machine. 
          */
-        if (session.engineBoots == 0)
+      if (session.engineBoots == 0) {
             session.engineBoots = 1;
-        if (session.engineTime == 0)    /* not really correct, */
+      }
+      if (session.engineTime == 0) {        /* not really correct, */
             session.engineTime = get_uptime();  /* but it'll work. Sort of. */
+      }
 
-        set_enginetime(session.securityEngineID, session.securityEngineIDLen,
-                       session.engineBoots, session.engineTime, TRUE);
+      set_enginetime(session.securityEngineID, session.securityEngineIDLen, session.engineBoots,
+                     session.engineTime, TRUE);
     }
 
-    ss = snmp_add(&session,
-                  netsnmp_transport_open_client("snmptrap", session.peername),
-                  NULL, NULL);
+   ss = snmp_add(&session, netsnmp_transport_open_client("snmptrap", session.peername), NULL, NULL);
     if (ss == NULL) {
         /*
          * diagnose netsnmp_transport_open_client and snmp_add errors with
          * the input netsnmp_session pointer
          */
-        snmp_sess_perror("snmptrap", &session);
+      snmp_sess_perror_exception("snmptrap", &session);
         goto out;
     }
 
@@ -245,20 +241,18 @@
         pdu_in_addr_t = (in_addr_t *) pdu->agent_addr;
         if (arg == argc) {
             fprintf(stderr, "No enterprise oid\n");
-            usage();
+         snmptrap_usage();
             goto out;
         }
         if (argv[arg][0] == 0) {
             pdu->enterprise = (oid *) malloc(sizeof(objid_enterprise));
-            memcpy(pdu->enterprise, objid_enterprise,
-                   sizeof(objid_enterprise));
-            pdu->enterprise_length =
-                OID_LENGTH(objid_enterprise);
+         memcpy(pdu->enterprise, objid_enterprise, sizeof(objid_enterprise));
+         pdu->enterprise_length = OID_LENGTH(objid_enterprise);
         } else {
             name_length = MAX_OID_LEN;
             if (!snmp_parse_oid(argv[arg], name, &name_length)) {
-                snmp_perror(argv[arg]);
-                usage();
+            snmp_perror_exception(argv[arg]);
+            snmptrap_usage();
                 goto out;
             }
             pdu->enterprise = (oid *) malloc(name_length * sizeof(oid));
@@ -267,7 +261,7 @@
         }
         if (++arg >= argc) {
             fprintf(stderr, "Missing agent parameter\n");
-            usage();
+         snmptrap_usage();
             goto out;
         }
         agent = argv[arg];
@@ -282,28 +276,29 @@
         }
         if (++arg == argc) {
             fprintf(stderr, "Missing generic-trap parameter\n");
-            usage();
+         snmptrap_usage();
             goto out;
         }
         trap = argv[arg];
         pdu->trap_type = atoi(trap);
         if (++arg == argc) {
             fprintf(stderr, "Missing specific-trap parameter\n");
-            usage();
+         snmptrap_usage();
             goto out;
         }
         specific = argv[arg];
         pdu->specific_type = atoi(specific);
         if (++arg == argc) {
             fprintf(stderr, "Missing uptime parameter\n");
-            usage();
+         snmptrap_usage();
             goto out;
         }
         description = argv[arg];
-        if (description == NULL || *description == 0)
+      if (description == NULL || *description == 0) {
             pdu->time = get_uptime();
-        else
+      } else {
             pdu->time = atol(description);
+      }
     } else
 #endif
     {
@@ -317,7 +312,7 @@
         }
         if (arg == argc) {
             fprintf(stderr, "Missing up-time parameter\n");
-            usage();
+         snmptrap_usage();
             goto out;
         }
         trap = argv[arg];
@@ -326,17 +321,14 @@
             snprintf(csysuptime, sizeof csysuptime, "%ld", sysuptime);
             trap = csysuptime;
         }
-        snmp_add_var(pdu, objid_sysuptime,
-                     OID_LENGTH(objid_sysuptime), 't', trap);
+      snmp_add_var(pdu, objid_sysuptime, OID_LENGTH(objid_sysuptime), 't', trap);
         if (++arg == argc) {
             fprintf(stderr, "Missing trap-oid parameter\n");
-            usage();
+         snmptrap_usage();
             goto out;
         }
-        if (snmp_add_var
-            (pdu, objid_snmptrap, OID_LENGTH(objid_snmptrap),
-             'o', argv[arg]) != 0) {
-            snmp_perror(argv[arg]);
+      if (snmp_add_var(pdu, objid_snmptrap, OID_LENGTH(objid_snmptrap), 'o', argv[arg]) != 0) {
+         snmp_perror_exception(argv[arg]);
             goto out;
         }
     }
@@ -345,34 +337,34 @@
     while (arg < argc) {
         arg += 3;
         if (arg > argc) {
-            fprintf(stderr, "%s: Missing type/value for variable\n",
-                    argv[arg - 3]);
+         fprintf(stderr, "%s: Missing type/value for variable\n", argv[arg - 3]);
             goto out;
         }
         name_length = MAX_OID_LEN;
         if (!snmp_parse_oid(argv[arg - 3], name, &name_length)) {
-            snmp_perror(argv[arg - 3]);
+         snmp_perror_exception(argv[arg - 3]);
             goto out;
         }
-        if (snmp_add_var
-            (pdu, name, name_length, argv[arg - 2][0],
-             argv[arg - 1]) != 0) {
-            snmp_perror(argv[arg - 3]);
+      if (snmp_add_var(pdu, name, name_length, argv[arg - 2][0], argv[arg - 1]) != 0) {
+         snmp_perror_exception(argv[arg - 3]);
             goto out;
         }
     }
 
-    if (inform)
+   if (inform) {
         status = snmp_synch_response(ss, pdu, &response);
-    else
+   } else {
         status = snmp_send(ss, pdu) == 0;
+   }
     if (status) {
-        snmp_sess_perror(inform ? "snmpinform" : "snmptrap", ss);
-        if (!inform)
+      snmp_sess_perror_exception(inform ? "snmpinform" : "snmptrap", ss);
+      if (!inform) {
             snmp_free_pdu(pdu);
+      }
         goto close_session;
-    } else if (inform)
+   } else if (inform) {
         snmp_free_pdu(response);
+   }
 
     exitval = 0;
 
