--- net-snmp-master/apps/snmpbulkget.c 2024-09-06 10:48:16
+++ ../src/snmpbulkget.cpp             2024-11-11 16:21:26
@@ -1,3 +1,4 @@
+/* straight copy from https://github.com/net-snmp/net-snmp/tree/master/apps */
 /*
  * snmpbulkget.c - send SNMPv2 Bulk requests to a network entity.
  *
@@ -54,8 +55,8 @@
 #ifdef HAVE_SYS_SELECT_H
 #include <sys/select.h>
 #endif
-#include <stdio.h>
 #include <ctype.h>
+#include <stdio.h>
 #ifdef HAVE_NETDB_H
 #include <netdb.h>
 #endif
@@ -65,7 +66,7 @@
 
 #include <net-snmp/net-snmp-includes.h>
 
-oid             objid_mib[] = { 1, 3, 6, 1, 2, 1 };
+oid snmpbulkget_objid_mib[] = {1, 3, 6, 1, 2, 1};
 int             max_repetitions = 10;
 int             non_repeaters = 0;
 struct nameStruct {
@@ -74,23 +75,22 @@
 }              *name, *namep;
 int             names;
 
-void
-usage(void)
-{
+#include <stdexcept>
+
+#include "helpers.h"
+#include "snmpbulkget.h"
+
+void snmpbulkget_usage(void) {
     fprintf(stderr, "USAGE: snmpbulkget ");
     snmp_parse_args_usage(stderr);
     fprintf(stderr, " OID [OID]...\n\n");
     snmp_parse_args_descriptions(stderr);
-    fprintf(stderr,
-            "  -C APPOPTS\t\tSet various application specific behaviours:\n");
+   fprintf(stderr, "  -C APPOPTS\t\tSet various application specific behaviours:\n");
     fprintf(stderr, "\t\t\t  n<NUM>:  set non-repeaters to <NUM>\n");
     fprintf(stderr, "\t\t\t  r<NUM>:  set max-repeaters to <NUM>\n");
 }
 
-static
-    void
-optProc(int argc, char *const *argv, int opt)
-{
+void snmpbulkget_optProc(int argc, char *const *argv, int opt) {
     char           *endptr = NULL;
 
     switch (opt) {
@@ -109,7 +109,7 @@
                     /*
                      * No number given -- error.  
                      */
-                    usage();
+                     snmpbulkget_usage();
                     exit(1);
                 } else {
                     optarg = endptr;
@@ -120,17 +120,19 @@
                 break;
 
             default:
-                fprintf(stderr, "Unknown flag passed to -C: %c\n",
-                        optarg[-1]);
-                exit(1);
+                  std::string err_msg =
+                      "Unknown flag passed to -C: " + std::string(1, optarg[-1]) + "\n";
+                  throw std::runtime_error(err_msg);
             }
         }
     }
 }
 
-int
-main(int argc, char *argv[])
-{
+std::vector<Result> snmpbulkget(std::vector<std::string> const &args) {
+   int argc;
+   std::unique_ptr<char *[]> argv = create_argv(args, argc);
+
+   std::vector<std::string> return_vector;
     netsnmp_session session, *ss;
     netsnmp_pdu    *pdu;
     netsnmp_pdu    *response;
@@ -138,22 +140,22 @@
     int             arg;
     int             count;
     int             status;
-    int             exitval = 1;
 
     SOCK_STARTUP;
 
     /*
      * get the common command line arguments 
      */
-    switch (arg = snmp_parse_args(argc, argv, &session, "C:", optProc)) {
+   switch (arg = snmp_parse_args(argc, argv.get(), &session, "C:", snmpbulkget_optProc)) {
     case NETSNMP_PARSE_ARGS_ERROR:
-        goto out;
+         throw std::runtime_error("NETSNMP_PARSE_ARGS_ERROR");
+
     case NETSNMP_PARSE_ARGS_SUCCESS_EXIT:
-        exitval = 0;
-        goto out;
+         throw std::runtime_error("NETSNMP_PARSE_ARGS_SUCCESS_EXIT");
+
     case NETSNMP_PARSE_ARGS_ERROR_USAGE:
-        usage();
-        goto out;
+         throw std::runtime_error("NETSNMP_PARSE_ARGS_ERROR_USAGE");
+
     default:
         break;
     }
@@ -161,16 +163,15 @@
     names = argc - arg;
     if (names < non_repeaters) {
         fprintf(stderr, "snmpbulkget: need more objects than <nonrep>\n");
-        goto out;
+      return parse_results(return_vector);
     }
 
-    namep = name = calloc(names, sizeof(*name));
+   namep = name = (struct nameStruct *)calloc(names, sizeof(*name));
     while (arg < argc) {
         namep->name_len = MAX_OID_LEN;
-        if (snmp_parse_oid(argv[arg], namep->name, &namep->name_len) ==
-            NULL) {
-            snmp_perror(argv[arg]);
-            goto out;
+      if (snmp_parse_oid(argv[arg], namep->name, &namep->name_len) == NULL) {
+         snmp_perror_exception(argv[arg]);
+         return parse_results(return_vector);
         }
         arg++;
         namep++;
@@ -184,20 +185,19 @@
         /*
          * diagnose snmp_open errors with the input netsnmp_session pointer 
          */
-        snmp_sess_perror("snmpbulkget", &session);
-        goto out;
+      snmp_sess_perror_exception("snmpbulkget", &session);
+      return parse_results(return_vector);
     }
 
-    exitval = 0;
-
     /*
      * create PDU for GETBULK request and add object name to request 
      */
     pdu = snmp_pdu_create(SNMP_MSG_GETBULK);
     pdu->non_repeaters = non_repeaters;
     pdu->max_repetitions = max_repetitions;     /* fill the packet */
-    for (arg = 0; arg < names; arg++)
+   for (arg = 0; arg < names; arg++) {
         snmp_add_null_var(pdu, name[arg].name, name[arg].name_len);
+   }
 
     /*
      * do the request 
@@ -208,9 +208,10 @@
             /*
              * check resulting variables 
              */
-            for (vars = response->variables; vars;
-                 vars = vars->next_variable)
-                print_variable(vars->name, vars->name_length, vars);
+         for (vars = response->variables; vars; vars = vars->next_variable) {
+            auto str_value = print_variable_to_string(vars->name, vars->name_length, vars);
+            return_vector.push_back(str_value);
+         }
         } else {
             /*
              * error in response, print it 
@@ -218,38 +219,33 @@
             if (response->errstat == SNMP_ERR_NOSUCHNAME) {
                 printf("End of MIB.\n");
             } else {
-                fprintf(stderr, "Error in packet.\nReason: %s\n",
-                        snmp_errstring(response->errstat));
+            fprintf(stderr, "Error in packet.\nReason: %s\n", snmp_errstring(response->errstat));
                 if (response->errindex != 0) {
                     fprintf(stderr, "Failed object: ");
-                    for (count = 1, vars = response->variables;
-                         vars && (count != response->errindex);
+               for (count = 1, vars = response->variables; vars && (count != response->errindex);
                          vars = vars->next_variable, count++)
                         /*EMPTY*/;
-                    if (vars)
-                        fprint_objid(stderr, vars->name,
-                                     vars->name_length);
+               if (vars) {
+                  fprint_objid(stderr, vars->name, vars->name_length);
+               }
                     fprintf(stderr, "\n");
                 }
-                exitval = 2;
             }
         }
     } else if (status == STAT_TIMEOUT) {
-        fprintf(stderr, "Timeout: No Response from %s\n",
-                session.peername);
-        exitval = 1;
+      fprintf(stderr, "Timeout: No Response from %s\n", session.peername);
+
     } else {                    /* status == STAT_ERROR */
-        snmp_sess_perror("snmpbulkget", ss);
-        exitval = 1;
+      snmp_sess_perror_exception("snmpbulkget", ss);
     }
 
-    if (response)
+   if (response) {
         snmp_free_pdu(response);
+   }
 
     snmp_close(ss);
 
-out:
     netsnmp_cleanup_session(&session);
     SOCK_CLEANUP;
-    return exitval;
+   return parse_results(return_vector);
 }
