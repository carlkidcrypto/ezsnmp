--- net-snmp-master/apps/snmpbulkwalk.c 2024-09-06 10:48:16
+++ ../src/snmpbulkwalk.cpp             2024-10-11 13:21:00
@@ -1,3 +1,4 @@
+/* straight copy from https://github.com/net-snmp/net-snmp/tree/master/apps */
 /*
  * snmpbulkwalk.c - send SNMPv2 Bulk requests to a network entity, walking a
  * subtree.
@@ -54,8 +55,8 @@
 #ifdef HAVE_SYS_SELECT_H
 #include <sys/select.h>
 #endif
-#include <stdio.h>
 #include <ctype.h>
+#include <stdio.h>
 #ifdef HAVE_NETDB_H
 #include <netdb.h>
 #endif
@@ -69,32 +70,32 @@
 #define NETSNMP_DS_WALK_PRINT_STATISTICS		2
 #define NETSNMP_DS_WALK_DONT_CHECK_LEXICOGRAPHIC	3
 
-oid             objid_mib[] = { 1, 3, 6, 1, 2, 1 };
-int             numprinted = 0;
-int             reps = 10, non_reps = 0;
+oid snmpbulkwalk_objid_mib[] = {1, 3, 6, 1, 2, 1};
+int snmpbulkwalk_numprinted = 0;
+int snmpbulkwalk_reps = 10, snmpbulkwalk_non_reps = 0;
 
-void
-usage(void)
-{
+#include <stdexcept>
+
+#include "helpers.h"
+#include "snmpbulkwalk.h"
+
+void snmpbulkwalk_usage(void) {
     fprintf(stderr, "USAGE: snmpbulkwalk ");
     snmp_parse_args_usage(stderr);
     fprintf(stderr, " [OID]\n\n");
     snmp_parse_args_descriptions(stderr);
-    fprintf(stderr,
-            "  -C APPOPTS\t\tSet various application specific behaviours:\n");
-    fprintf(stderr,
-            "\t\t\t  c:       do not check returned OIDs are increasing\n");
-    fprintf(stderr,
-            "\t\t\t  i:       include given OIDs in the search range\n");
+   fprintf(stderr, "  -C APPOPTS\t\tSet various application specific behaviours:\n");
+   fprintf(stderr, "\t\t\t  c:       do not check returned OIDs are increasing\n");
+   fprintf(stderr, "\t\t\t  i:       include given OIDs in the search range\n");
     fprintf(stderr, "\t\t\t  n<NUM>:  set non-repeaters to <NUM>\n");
-    fprintf(stderr,
-            "\t\t\t  p:       print the number of variables found\n");
+   fprintf(stderr, "\t\t\t  p:       print the number of variables found\n");
     fprintf(stderr, "\t\t\t  r<NUM>:  set max-repeaters to <NUM>\n");
 }
 
-static void
-snmp_get_and_print(netsnmp_session * ss, oid * theoid, size_t theoid_len)
-{
+std::vector<std::string> snmpbulkwalk_snmp_get_and_print(netsnmp_session *ss, oid *theoid,
+                                                         size_t theoid_len) {
+   std::vector<std::string> str_values;
+
     netsnmp_pdu    *pdu, *response;
     netsnmp_variable_list *vars;
     int             status;
@@ -105,19 +106,19 @@
     status = snmp_synch_response(ss, pdu, &response);
     if (status == STAT_SUCCESS && response->errstat == SNMP_ERR_NOERROR) {
         for (vars = response->variables; vars; vars = vars->next_variable) {
-            numprinted++;
-            print_variable(vars->name, vars->name_length, vars);
+         snmpbulkwalk_numprinted++;
+         auto str_value = print_variable_to_string(vars->name, vars->name_length, vars);
+         str_values.push_back(str_value);
         }
     }
     if (response) {
         snmp_free_pdu(response);
     }
+
+   return str_values;
 }
 
-static
-    void
-optProc(int argc, char *const *argv, int opt)
-{
+void snmpbulkwalk_optProc(int argc, char *const *argv, int opt) {
     char           *endptr = NULL;
 
     switch (opt) {
@@ -137,16 +138,16 @@
             case 'n':
             case 'r':
                 if (*(optarg - 1) == 'r') {
-                    reps = strtol(optarg, &endptr, 0);
+                     snmpbulkwalk_reps = strtol(optarg, &endptr, 0);
                 } else {
-                    non_reps = strtol(optarg, &endptr, 0);
+                     snmpbulkwalk_non_reps = strtol(optarg, &endptr, 0);
                 }
 
                 if (endptr == optarg) {
                     /*
                      * No number given -- error.  
                      */
-                    usage();
+                     snmpbulkwalk_usage();
                     exit(1);
                 } else {
                     optarg = endptr;
@@ -162,8 +163,7 @@
                 break;
 
             default:
-                fprintf(stderr, "Unknown flag passed to -C: %c\n",
-                        optarg[-1]);
+                  fprintf(stderr, "Unknown flag passed to -C: %c\n", optarg[-1]);
                 exit(1);
             }
         }
@@ -171,9 +171,11 @@
     }
 }
 
-int
-main(int argc, char *argv[])
-{
+std::vector<Result> snmpbulkwalk(std::vector<std::string> const &args) {
+   int argc;
+   std::unique_ptr<char *[]> argv = create_argv(args, argc);
+
+   std::vector<std::string> return_vector;
     netsnmp_session session, *ss;
     netsnmp_pdu    *pdu, *response;
     netsnmp_variable_list *vars;
@@ -191,27 +193,26 @@
     SOCK_STARTUP;
 
     netsnmp_ds_register_config(ASN_BOOLEAN, "snmpwalk", "includeRequested",
-			       NETSNMP_DS_APPLICATION_ID, 
-			       NETSNMP_DS_WALK_INCLUDE_REQUESTED);
-    netsnmp_ds_register_config(ASN_BOOLEAN, "snmpwalk", "printStatistics",
-			       NETSNMP_DS_APPLICATION_ID, 
+                              NETSNMP_DS_APPLICATION_ID, NETSNMP_DS_WALK_INCLUDE_REQUESTED);
+   netsnmp_ds_register_config(ASN_BOOLEAN, "snmpwalk", "printStatistics", NETSNMP_DS_APPLICATION_ID,
 			       NETSNMP_DS_WALK_PRINT_STATISTICS);
     netsnmp_ds_register_config(ASN_BOOLEAN, "snmpwalk", "dontCheckOrdering",
-			       NETSNMP_DS_APPLICATION_ID,
-			       NETSNMP_DS_WALK_DONT_CHECK_LEXICOGRAPHIC);
+                              NETSNMP_DS_APPLICATION_ID, NETSNMP_DS_WALK_DONT_CHECK_LEXICOGRAPHIC);
 
     /*
      * get the common command line arguments 
      */
-    switch (arg = snmp_parse_args(argc, argv, &session, "C:", optProc)) {
+   switch (arg = snmp_parse_args(argc, argv.get(), &session, "C:", snmpbulkwalk_optProc)) {
     case NETSNMP_PARSE_ARGS_ERROR:
-        goto out;
+         throw std::runtime_error("NETSNMP_PARSE_ARGS_ERROR");
+
     case NETSNMP_PARSE_ARGS_SUCCESS_EXIT:
-        exitval = 0;
-        goto out;
+         throw std::runtime_error("NETSNMP_PARSE_ARGS_SUCCESS_EXIT");
+
     case NETSNMP_PARSE_ARGS_ERROR_USAGE:
-        usage();
-        goto out;
+         snmpbulkwalk_usage();
+         return parse_results(return_vector);
+
     default:
         break;
     }
@@ -226,14 +227,14 @@
         rootlen = MAX_OID_LEN;
         if (snmp_parse_oid(argv[arg], root, &rootlen) == NULL) {
             snmp_perror(argv[arg]);
-            goto out;
+         return parse_results(return_vector);
         }
     } else {
         /*
          * use default value 
          */
-        memmove(root, objid_mib, sizeof(objid_mib));
-        rootlen = OID_LENGTH(objid_mib);
+      memmove(root, snmpbulkwalk_objid_mib, sizeof(snmpbulkwalk_objid_mib));
+      rootlen = OID_LENGTH(snmpbulkwalk_objid_mib);
     }
 
     /*
@@ -245,7 +246,7 @@
          * diagnose snmp_open errors with the input netsnmp_session pointer 
          */
         snmp_sess_perror("snmpbulkwalk", &session);
-        goto out;
+      return parse_results(return_vector);
     }
 
     /*
@@ -256,12 +257,15 @@
 
     running = 1;
 
-    check = !netsnmp_ds_get_boolean(NETSNMP_DS_APPLICATION_ID,
-				    NETSNMP_DS_WALK_DONT_CHECK_LEXICOGRAPHIC);
-    if (netsnmp_ds_get_boolean(NETSNMP_DS_APPLICATION_ID,
-			       NETSNMP_DS_WALK_INCLUDE_REQUESTED)) {
-        snmp_get_and_print(ss, root, rootlen);
+   check =
+       !netsnmp_ds_get_boolean(NETSNMP_DS_APPLICATION_ID, NETSNMP_DS_WALK_DONT_CHECK_LEXICOGRAPHIC);
+   if (netsnmp_ds_get_boolean(NETSNMP_DS_APPLICATION_ID, NETSNMP_DS_WALK_INCLUDE_REQUESTED)) {
+      auto retval = snmpbulkwalk_snmp_get_and_print(ss, root, rootlen);
+
+      for (auto const &item : retval) {
+         return_vector.push_back(item);
     }
+   }
 
     exitval = 0;
 
@@ -270,8 +274,8 @@
          * create PDU for GETBULK request and add object name to request 
          */
         pdu = snmp_pdu_create(SNMP_MSG_GETBULK);
-        pdu->non_repeaters = non_reps;
-        pdu->max_repetitions = reps;    /* fill the packet */
+      pdu->non_repeaters = snmpbulkwalk_non_reps;
+      pdu->max_repetitions = snmpbulkwalk_reps; /* fill the packet */
         snmp_add_null_var(pdu, name, name_length);
 
         /*
@@ -283,35 +287,30 @@
                 /*
                  * check resulting variables 
                  */
-                for (vars = response->variables; vars;
-                     vars = vars->next_variable) {
-                    if ((vars->name_length < rootlen)
-                        || (memcmp(root, vars->name, rootlen * sizeof(oid))
-                            != 0)) {
+            for (vars = response->variables; vars; vars = vars->next_variable) {
+               if ((vars->name_length < rootlen) ||
+                   (memcmp(root, vars->name, rootlen * sizeof(oid)) != 0)) {
                         /*
                          * not part of this subtree 
                          */
                         running = 0;
                         continue;
                     }
-                    numprinted++;
-                    print_variable(vars->name, vars->name_length, vars);
-                    if ((vars->type != SNMP_ENDOFMIBVIEW) &&
-                        (vars->type != SNMP_NOSUCHOBJECT) &&
+               snmpbulkwalk_numprinted++;
+               auto str_value = print_variable_to_string(vars->name, vars->name_length, vars);
+               return_vector.push_back(str_value);
+               if ((vars->type != SNMP_ENDOFMIBVIEW) && (vars->type != SNMP_NOSUCHOBJECT) &&
                         (vars->type != SNMP_NOSUCHINSTANCE)) {
                         /*
                          * not an exception value 
                          */
-                        if (check
-                            && snmp_oid_compare(name, name_length,
-                                                vars->name,
-                                                vars->name_length) >= 0) {
+                  if (check &&
+                      snmp_oid_compare(name, name_length, vars->name, vars->name_length) >= 0) {
                             fflush(stdout);
                             fprintf(stderr, "Error: OID not increasing: ");
                             fprint_objid(stderr, name, name_length);
                             fprintf(stderr, " >= ");
-                            fprint_objid(stderr, vars->name,
-                                         vars->name_length);
+                     fprint_objid(stderr, vars->name, vars->name_length);
                             fprintf(stderr, "\n");
                             running = 0;
                             exitval = 1;
@@ -320,8 +319,7 @@
                          * Check if last variable, and if so, save for next request.  
                          */
                         if (vars->next_variable == NULL) {
-                            memmove(name, vars->name,
-                                    vars->name_length * sizeof(oid));
+                     memmove(name, vars->name, vars->name_length * sizeof(oid));
                             name_length = vars->name_length;
                         }
                     } else {
@@ -339,25 +337,22 @@
                 if (response->errstat == SNMP_ERR_NOSUCHNAME) {
                     printf("End of MIB\n");
                 } else {
-                    fprintf(stderr, "Error in packet.\nReason: %s\n",
-                            snmp_errstring(response->errstat));
+               fprintf(stderr, "Error in packet.\nReason: %s\n", snmp_errstring(response->errstat));
                     if (response->errindex != 0) {
                         fprintf(stderr, "Failed object: ");
-                        for (count = 1, vars = response->variables;
-                             vars && count != response->errindex;
+                  for (count = 1, vars = response->variables; vars && count != response->errindex;
                              vars = vars->next_variable, count++)
                             /*EMPTY*/;
-                        if (vars)
-                            fprint_objid(stderr, vars->name,
-                                         vars->name_length);
+                  if (vars) {
+                     fprint_objid(stderr, vars->name, vars->name_length);
+                  }
                         fprintf(stderr, "\n");
                     }
                     exitval = 2;
                 }
             }
         } else if (status == STAT_TIMEOUT) {
-            fprintf(stderr, "Timeout: No Response from %s\n",
-                    session.peername);
+         fprintf(stderr, "Timeout: No Response from %s\n", session.peername);
             running = 0;
             exitval = 1;
         } else {                /* status == STAT_ERROR */
@@ -365,27 +360,31 @@
             running = 0;
             exitval = 1;
         }
-        if (response)
+      if (response) {
             snmp_free_pdu(response);
     }
+   }
 
-    if (numprinted == 0 && status == STAT_SUCCESS) {
+   if (snmpbulkwalk_numprinted == 0 && status == STAT_SUCCESS) {
         /*
          * no printed successful results, which may mean we were
          * pointed at an only existing instance.  Attempt a GET, just
          * for get measure. 
          */
-        snmp_get_and_print(ss, root, rootlen);
+      auto retval = snmpbulkwalk_snmp_get_and_print(ss, root, rootlen);
+
+      for (auto const &item : retval) {
+         return_vector.push_back(item);
     }
+   }
     snmp_close(ss);
 
-    if (netsnmp_ds_get_boolean(NETSNMP_DS_APPLICATION_ID, 
-			       NETSNMP_DS_WALK_PRINT_STATISTICS)) {
-        printf("Variables found: %d\n", numprinted);
+   if (netsnmp_ds_get_boolean(NETSNMP_DS_APPLICATION_ID, NETSNMP_DS_WALK_PRINT_STATISTICS)) {
+      printf("Variables found: %d\n", snmpbulkwalk_numprinted);
     }
 
 out:
     netsnmp_cleanup_session(&session);
     SOCK_CLEANUP;
-    return exitval;
+   return parse_results(return_vector);
 }
