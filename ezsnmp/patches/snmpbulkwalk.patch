--- net-snmp-master/apps/snmpbulkwalk.c 2024-09-06 10:48:16
+++ snmpbulkwalk.cpp                    2024-10-01 09:25:50
@@ -1,3 +1,4 @@
+/* straight copy from https://github.com/net-snmp/net-snmp/tree/master/apps */
 /*
  * snmpbulkwalk.c - send SNMPv2 Bulk requests to a network entity, walking a
  * subtree.
@@ -69,12 +70,15 @@
 #define NETSNMP_DS_WALK_PRINT_STATISTICS		2
 #define NETSNMP_DS_WALK_DONT_CHECK_LEXICOGRAPHIC	3
 
-oid             objid_mib[] = { 1, 3, 6, 1, 2, 1 };
-int             numprinted = 0;
-int             reps = 10, non_reps = 0;
+oid snmpbulkwalk_objid_mib[] = {1, 3, 6, 1, 2, 1};
+int snmpbulkwalk_numprinted = 0;
+int snmpbulkwalk_reps = 10, snmpbulkwalk_non_reps = 0;
 
-void
-usage(void)
+#include <stdexcept>
+#include "snmpbulkwalk.h"
+#include "helpers.h"
+
+void snmpbulkwalk_usage(void)
 {
     fprintf(stderr, "USAGE: snmpbulkwalk ");
     snmp_parse_args_usage(stderr);
@@ -92,9 +96,10 @@
     fprintf(stderr, "\t\t\t  r<NUM>:  set max-repeaters to <NUM>\n");
 }
 
-static void
-snmp_get_and_print(netsnmp_session * ss, oid * theoid, size_t theoid_len)
+std::vector<std::string> snmpbulkwalk_snmp_get_and_print(netsnmp_session *ss, oid *theoid, size_t theoid_len)
 {
+   std::vector<std::string> str_values;
+
     netsnmp_pdu    *pdu, *response;
     netsnmp_variable_list *vars;
     int             status;
@@ -103,27 +108,34 @@
     snmp_add_null_var(pdu, theoid, theoid_len);
 
     status = snmp_synch_response(ss, pdu, &response);
-    if (status == STAT_SUCCESS && response->errstat == SNMP_ERR_NOERROR) {
-        for (vars = response->variables; vars; vars = vars->next_variable) {
-            numprinted++;
-            print_variable(vars->name, vars->name_length, vars);
+   if (status == STAT_SUCCESS && response->errstat == SNMP_ERR_NOERROR)
+   {
+      for (vars = response->variables; vars; vars = vars->next_variable)
+      {
+         snmpbulkwalk_numprinted++;
+         auto str_value = print_variable_to_string(vars->name, vars->name_length, vars);
+         str_values.push_back(str_value);
         }
     }
-    if (response) {
+   if (response)
+   {
         snmp_free_pdu(response);
     }
+
+   return str_values;
 }
 
-static
-    void
-optProc(int argc, char *const *argv, int opt)
+void snmpbulkwalk_optProc(int argc, char *const *argv, int opt)
 {
     char           *endptr = NULL;
 
-    switch (opt) {
+   switch (opt)
+   {
     case 'C':
-        while (*optarg) {
-            switch (*optarg++) {
+      while (*optarg)
+      {
+         switch (*optarg++)
+         {
             case 'c':
                 netsnmp_ds_toggle_boolean(NETSNMP_DS_APPLICATION_ID,
 				     NETSNMP_DS_WALK_DONT_CHECK_LEXICOGRAPHIC);
@@ -136,21 +148,28 @@
 
             case 'n':
             case 'r':
-                if (*(optarg - 1) == 'r') {
-                    reps = strtol(optarg, &endptr, 0);
-                } else {
-                    non_reps = strtol(optarg, &endptr, 0);
+            if (*(optarg - 1) == 'r')
+            {
+               snmpbulkwalk_reps = strtol(optarg, &endptr, 0);
                 }
+            else
+            {
+               snmpbulkwalk_non_reps = strtol(optarg, &endptr, 0);
+            }
 
-                if (endptr == optarg) {
+            if (endptr == optarg)
+            {
                     /*
                      * No number given -- error.  
                      */
-                    usage();
+               snmpbulkwalk_usage();
                     exit(1);
-                } else {
+            }
+            else
+            {
                     optarg = endptr;
-                    if (isspace((unsigned char)(*optarg))) {
+               if (isspace((unsigned char)(*optarg)))
+               {
                         return;
                     }
                 }
@@ -171,9 +190,12 @@
     }
 }
 
-int
-main(int argc, char *argv[])
+std::vector<std::string> snmpbulkwalk(const std::vector<std::string> &args)
 {
+   int argc;
+   std::unique_ptr<char*[]> argv = create_argv(args, argc);
+
+   std::vector<std::string> return_vector;
     netsnmp_session session, *ss;
     netsnmp_pdu    *pdu, *response;
     netsnmp_variable_list *vars;
@@ -203,15 +225,18 @@
     /*
      * get the common command line arguments 
      */
-    switch (arg = snmp_parse_args(argc, argv, &session, "C:", optProc)) {
+   switch (arg = snmp_parse_args(argc, argv.get(), &session, "C:", snmpbulkwalk_optProc))
+   {
     case NETSNMP_PARSE_ARGS_ERROR:
-        goto out;
+      throw std::runtime_error("NETSNMP_PARSE_ARGS_ERROR");
+
     case NETSNMP_PARSE_ARGS_SUCCESS_EXIT:
-        exitval = 0;
-        goto out;
+      throw std::runtime_error("NETSNMP_PARSE_ARGS_SUCCESS_EXIT");
+
     case NETSNMP_PARSE_ARGS_ERROR_USAGE:
-        usage();
-        goto out;
+      snmpbulkwalk_usage();
+      return return_vector;
+
     default:
         break;
     }
@@ -219,33 +244,38 @@
     /*
      * get the initial object and subtree 
      */
-    if (arg < argc) {
+   if (arg < argc)
+   {
         /*
          * specified on the command line 
          */
         rootlen = MAX_OID_LEN;
-        if (snmp_parse_oid(argv[arg], root, &rootlen) == NULL) {
+      if (snmp_parse_oid(argv[arg], root, &rootlen) == NULL)
+      {
             snmp_perror(argv[arg]);
-            goto out;
+         return return_vector;
         }
-    } else {
+   }
+   else
+   {
         /*
          * use default value 
          */
-        memmove(root, objid_mib, sizeof(objid_mib));
-        rootlen = OID_LENGTH(objid_mib);
+      memmove(root, snmpbulkwalk_objid_mib, sizeof(snmpbulkwalk_objid_mib));
+      rootlen = OID_LENGTH(snmpbulkwalk_objid_mib);
     }
 
     /*
      * open an SNMP session 
      */
     ss = snmp_open(&session);
-    if (ss == NULL) {
+   if (ss == NULL)
+   {
         /*
          * diagnose snmp_open errors with the input netsnmp_session pointer 
          */
         snmp_sess_perror("snmpbulkwalk", &session);
-        goto out;
+      return return_vector;
     }
 
     /*
@@ -259,53 +289,64 @@
     check = !netsnmp_ds_get_boolean(NETSNMP_DS_APPLICATION_ID,
 				    NETSNMP_DS_WALK_DONT_CHECK_LEXICOGRAPHIC);
     if (netsnmp_ds_get_boolean(NETSNMP_DS_APPLICATION_ID,
-			       NETSNMP_DS_WALK_INCLUDE_REQUESTED)) {
-        snmp_get_and_print(ss, root, rootlen);
+                              NETSNMP_DS_WALK_INCLUDE_REQUESTED))
+   {
+      auto retval = snmpbulkwalk_snmp_get_and_print(ss, root, rootlen);
+
+      for (const auto &item : retval)
+      {
+         return_vector.push_back(item);
     }
+   }
 
     exitval = 0;
 
-    while (running) {
+   while (running)
+   {
         /*
          * create PDU for GETBULK request and add object name to request 
          */
         pdu = snmp_pdu_create(SNMP_MSG_GETBULK);
-        pdu->non_repeaters = non_reps;
-        pdu->max_repetitions = reps;    /* fill the packet */
+      pdu->non_repeaters = snmpbulkwalk_non_reps;
+      pdu->max_repetitions = snmpbulkwalk_reps; /* fill the packet */
         snmp_add_null_var(pdu, name, name_length);
 
         /*
          * do the request 
          */
         status = snmp_synch_response(ss, pdu, &response);
-        if (status == STAT_SUCCESS) {
-            if (response->errstat == SNMP_ERR_NOERROR) {
+      if (status == STAT_SUCCESS)
+      {
+         if (response->errstat == SNMP_ERR_NOERROR)
+         {
                 /*
                  * check resulting variables 
                  */
                 for (vars = response->variables; vars;
-                     vars = vars->next_variable) {
-                    if ((vars->name_length < rootlen)
-                        || (memcmp(root, vars->name, rootlen * sizeof(oid))
-                            != 0)) {
+                 vars = vars->next_variable)
+            {
+               if ((vars->name_length < rootlen) || (memcmp(root, vars->name, rootlen * sizeof(oid)) != 0))
+               {
                         /*
                          * not part of this subtree 
                          */
                         running = 0;
                         continue;
                     }
-                    numprinted++;
-                    print_variable(vars->name, vars->name_length, vars);
+               snmpbulkwalk_numprinted++;
+               auto str_value = print_variable_to_string(vars->name, vars->name_length, vars);
+               return_vector.push_back(str_value);
                     if ((vars->type != SNMP_ENDOFMIBVIEW) &&
                         (vars->type != SNMP_NOSUCHOBJECT) &&
-                        (vars->type != SNMP_NOSUCHINSTANCE)) {
+                   (vars->type != SNMP_NOSUCHINSTANCE))
+               {
                         /*
                          * not an exception value 
                          */
-                        if (check
-                            && snmp_oid_compare(name, name_length,
+                  if (check && snmp_oid_compare(name, name_length,
                                                 vars->name,
-                                                vars->name_length) >= 0) {
+                                                vars->name_length) >= 0)
+                  {
                             fflush(stdout);
                             fprintf(stderr, "Error: OID not increasing: ");
                             fprint_objid(stderr, name, name_length);
@@ -319,29 +360,38 @@
                         /*
                          * Check if last variable, and if so, save for next request.  
                          */
-                        if (vars->next_variable == NULL) {
+                  if (vars->next_variable == NULL)
+                  {
                             memmove(name, vars->name,
                                     vars->name_length * sizeof(oid));
                             name_length = vars->name_length;
                         }
-                    } else {
+               }
+               else
+               {
                         /*
                          * an exception value, so stop 
                          */
                         running = 0;
                     }
                 }
-            } else {
+         }
+         else
+         {
                 /*
                  * error in response, print it 
                  */
                 running = 0;
-                if (response->errstat == SNMP_ERR_NOSUCHNAME) {
+            if (response->errstat == SNMP_ERR_NOSUCHNAME)
+            {
                     printf("End of MIB\n");
-                } else {
+            }
+            else
+            {
                     fprintf(stderr, "Error in packet.\nReason: %s\n",
                             snmp_errstring(response->errstat));
-                    if (response->errindex != 0) {
+               if (response->errindex != 0)
+               {
                         fprintf(stderr, "Failed object: ");
                         for (count = 1, vars = response->variables;
                              vars && count != response->errindex;
@@ -355,12 +405,16 @@
                     exitval = 2;
                 }
             }
-        } else if (status == STAT_TIMEOUT) {
+      }
+      else if (status == STAT_TIMEOUT)
+      {
             fprintf(stderr, "Timeout: No Response from %s\n",
                     session.peername);
             running = 0;
             exitval = 1;
-        } else {                /* status == STAT_ERROR */
+      }
+      else
+      { /* status == STAT_ERROR */
             snmp_sess_perror("snmpbulkwalk", ss);
             running = 0;
             exitval = 1;
@@ -369,23 +423,30 @@
             snmp_free_pdu(response);
     }
 
-    if (numprinted == 0 && status == STAT_SUCCESS) {
+   if (snmpbulkwalk_numprinted == 0 && status == STAT_SUCCESS)
+   {
         /*
          * no printed successful results, which may mean we were
          * pointed at an only existing instance.  Attempt a GET, just
          * for get measure. 
          */
-        snmp_get_and_print(ss, root, rootlen);
+      auto retval = snmpbulkwalk_snmp_get_and_print(ss, root, rootlen);
+
+      for (const auto &item : retval)
+      {
+         return_vector.push_back(item);
     }
+   }
     snmp_close(ss);
 
     if (netsnmp_ds_get_boolean(NETSNMP_DS_APPLICATION_ID, 
-			       NETSNMP_DS_WALK_PRINT_STATISTICS)) {
-        printf("Variables found: %d\n", numprinted);
+                              NETSNMP_DS_WALK_PRINT_STATISTICS))
+   {
+      printf("Variables found: %d\n", snmpbulkwalk_numprinted);
     }
 
 out:
     netsnmp_cleanup_session(&session);
     SOCK_CLEANUP;
-    return exitval;
+   return return_vector;
 }
