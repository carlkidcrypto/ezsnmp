--- net-snmp-master/apps/snmpset.c 2024-09-06 10:48:16
+++ ../src/snmpset.cpp             2024-11-12 21:05:54
@@ -1,3 +1,4 @@
+/* straight copy from https://github.com/net-snmp/net-snmp/tree/master/apps */
 /*
  * snmpset.c - send snmp SET requests to a network entity.
  *
@@ -40,8 +41,8 @@
 #ifdef HAVE_NETINET_IN_H
 #include <netinet/in.h>
 #endif
-#include <stdio.h>
 #include <ctype.h>
+#include <stdio.h>
 #ifdef TIME_WITH_SYS_TIME
 # include <sys/time.h>
 # include <time.h>
@@ -64,34 +65,29 @@
 
 #include <net-snmp/net-snmp-includes.h>
 
-void
-usage(void)
-{
+#include <stdexcept>
+
+#include "helpers.h"
+#include "snmpwalk.h"
+
+void snmpset_usage(void) {
     fprintf(stderr, "USAGE: snmpset ");
     snmp_parse_args_usage(stderr);
     fprintf(stderr, " OID TYPE VALUE [OID TYPE VALUE]...\n\n");
     snmp_parse_args_descriptions(stderr);
-    fprintf(stderr,
-            "  -C APPOPTS\t\tSet various application specific behaviours:\n");
+   fprintf(stderr, "  -C APPOPTS\t\tSet various application specific behaviours:\n");
     fprintf(stderr, "\t\t\t  q:  don't print results on success\n");
     fprintf(stderr, "\n  TYPE: one of i, u, t, a, o, s, x, d, b\n");
-    fprintf(stderr,
-            "\ti: INTEGER, u: unsigned INTEGER, t: TIMETICKS, a: IPADDRESS\n");
-    fprintf(stderr,
-            "\to: OBJID, s: STRING, x: HEX STRING, d: DECIMAL STRING, b: BITS\n");
+   fprintf(stderr, "\ti: INTEGER, u: unsigned INTEGER, t: TIMETICKS, a: IPADDRESS\n");
+   fprintf(stderr, "\to: OBJID, s: STRING, x: HEX STRING, d: DECIMAL STRING, b: BITS\n");
 #ifdef NETSNMP_WITH_OPAQUE_SPECIAL_TYPES
-    fprintf(stderr,
-            "\tU: unsigned int64, I: signed int64, F: float, D: double\n");
+   fprintf(stderr, "\tU: unsigned int64, I: signed int64, F: float, D: double\n");
 #endif                          /* NETSNMP_WITH_OPAQUE_SPECIAL_TYPES */
-
 }
 
 static int quiet = 0;
 
-static
-    void
-optProc(int argc, char *const *argv, int opt)
-{
+void snmpset_optProc(int argc, char *const *argv, int opt) {
     switch (opt) {
     case 'C':
         while (*optarg) {
@@ -101,17 +97,19 @@
                 break;
 
             default:
-                fprintf(stderr, "Unknown flag passed to -C: %c\n",
-                        optarg[-1]);
-                exit(1);
+                  std::string err_msg =
+                      "Unknown flag passed to -C: " + std::string(1, optarg[-1]) + "\n";
+                  throw std::runtime_error(err_msg);
             }
         }
     }
 }
 
-int
-main(int argc, char *argv[])
-{
+std::vector<Result> snmpset(std::vector<std::string> const &args) {
+   int argc;
+   std::unique_ptr<char *[]> argv = create_argv(args, argc);
+   std::vector<std::string> return_vector;
+
     netsnmp_session session, *ss;
     netsnmp_pdu    *pdu, *response = NULL;
     netsnmp_variable_list *vars;
@@ -127,7 +125,6 @@
     size_t          name_length;
     int             status;
     int             failures = 0;
-    int             exitval = 1;
 
     SOCK_STARTUP;
 
@@ -136,28 +133,29 @@
     /*
      * get the common command line arguments 
      */
-    switch (arg = snmp_parse_args(argc, argv, &session, "C:", optProc)) {
+   switch (arg = snmp_parse_args(argc, argv.get(), &session, "C:", snmpset_optProc)) {
     case NETSNMP_PARSE_ARGS_ERROR:
-        goto out;
+         throw std::runtime_error("NETSNMP_PARSE_ARGS_ERROR");
+
     case NETSNMP_PARSE_ARGS_SUCCESS_EXIT:
-        exitval = 0;
-        goto out;
+         throw std::runtime_error("NETSNMP_PARSE_ARGS_SUCCESS_EXIT");
+
     case NETSNMP_PARSE_ARGS_ERROR_USAGE:
-        usage();
-        goto out;
+         throw std::runtime_error("NETSNMP_PARSE_ARGS_ERROR_USAGE");
+
     default:
         break;
     }
 
     if (arg >= argc) {
         fprintf(stderr, "Missing object name\n");
-        usage();
+      snmpset_usage();
         goto out;
     }
     if ((argc - arg) > 3*SNMP_MAX_CMDLINE_OIDS) {
         fprintf(stderr, "Too many assignments specified. ");
         fprintf(stderr, "Only %d allowed in one request.\n", SNMP_MAX_CMDLINE_OIDS);
-        usage();
+      snmpset_usage();
         goto out;
     }
 
@@ -165,9 +163,8 @@
      * get object names, types, and values 
      */
     for (; arg < argc; arg++) {
-        DEBUGMSGTL(("snmp_parse_args", "handling (#%d): %s %s %s\n",
-                    arg, argv[arg], arg+1 < argc ? argv[arg+1] : "",
-                    arg+2 < argc ? argv[arg+2] : ""));
+      DEBUGMSGTL(("snmp_parse_args", "handling (#%d): %s %s %s\n", arg, argv[arg],
+                  arg + 1 < argc ? argv[arg + 1] : "", arg + 2 < argc ? argv[arg + 2] : ""));
         names[current_name++] = argv[arg++];
         if (arg < argc) {
             switch (*argv[arg]) {
@@ -192,17 +189,16 @@
                 types[current_type++] = *argv[arg++];
                 break;
             default:
-                fprintf(stderr, "%s: Bad object type: %c\n", argv[arg - 1],
-                        *argv[arg]);
+               fprintf(stderr, "%s: Bad object type: %c\n", argv[arg - 1], *argv[arg]);
                 goto out;
             }
         } else {
             fprintf(stderr, "%s: Needs type and value\n", argv[arg - 1]);
             goto out;
         }
-        if (arg < argc)
+      if (arg < argc) {
             values[current_value++] = argv[arg];
-        else {
+      } else {
             fprintf(stderr, "%s: Needs value\n", argv[arg - 2]);
             goto out;
         }
@@ -216,7 +212,7 @@
         /*
          * diagnose snmp_open errors with the input netsnmp_session pointer 
          */
-        snmp_sess_perror("snmpset", &session);
+      snmp_sess_perror_exception("snmpset", &session);
         goto out;
     }
 
@@ -227,21 +223,18 @@
     for (count = 0; count < current_name; count++) {
         name_length = MAX_OID_LEN;
         if (snmp_parse_oid(names[count], name, &name_length) == NULL) {
-            snmp_perror(names[count]);
+         snmp_perror_exception(names[count]);
             failures++;
-        } else
-            if (snmp_add_var
-                (pdu, name, name_length, types[count], values[count])) {
-            snmp_perror(names[count]);
+      } else if (snmp_add_var(pdu, name, name_length, types[count], values[count])) {
+         snmp_perror_exception(names[count]);
             failures++;
         }
     }
 
-    if (failures)
+   if (failures) {
         goto close_session;
+   }
 
-    exitval = 0;
-
     /*
      * do the request 
      */
@@ -249,35 +242,33 @@
     if (status == STAT_SUCCESS) {
         if (response->errstat == SNMP_ERR_NOERROR) {
             if (!quiet) {
-                for (vars = response->variables; vars;
-                     vars = vars->next_variable)
-                    print_variable(vars->name, vars->name_length, vars);
+            for (vars = response->variables; vars; vars = vars->next_variable) {
+               auto str_value = print_variable_to_string(vars->name, vars->name_length, vars);
+               return_vector.push_back(str_value);
             }
+         }
         } else {
-            fprintf(stderr, "Error in packet.\nReason: %s\n",
-                    snmp_errstring(response->errstat));
+         fprintf(stderr, "Error in packet.\nReason: %s\n", snmp_errstring(response->errstat));
             if (response->errindex != 0) {
                 fprintf(stderr, "Failed object: ");
-                for (count = 1, vars = response->variables;
-                     vars && (count != response->errindex);
+            for (count = 1, vars = response->variables; vars && (count != response->errindex);
                      vars = vars->next_variable, count++);
-                if (vars)
+            if (vars) {
                     fprint_objid(stderr, vars->name, vars->name_length);
+            }
                 fprintf(stderr, "\n");
             }
-            exitval = 2;
         }
     } else if (status == STAT_TIMEOUT) {
-        fprintf(stderr, "Timeout: No Response from %s\n",
-                session.peername);
-        exitval = 1;
+      std::string err_msg = "Timeout: No Response from " + std::string(session.peername) + ".\n";
+      throw std::runtime_error(err_msg);
     } else {                    /* status == STAT_ERROR */
-        snmp_sess_perror("snmpset", ss);
-        exitval = 1;
+      snmp_sess_perror_exception("snmpset", ss);
     }
 
-    if (response)
+   if (response) {
         snmp_free_pdu(response);
+   }
 
 close_session:
     snmp_close(ss);
@@ -285,5 +276,5 @@
 out:
     netsnmp_cleanup_session(&session);
     SOCK_CLEANUP;
-    return exitval;
+   return parse_results(return_vector);
 }
