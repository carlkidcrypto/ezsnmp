name: Run Dockerized Unit Tests

concurrency: tests-docker

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      any_changed: ${{ steps.changed-files.outputs.any_changed }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Check for changes in source code
        id: changed-files
        uses: tj-actions/changed-files@v47.0.0
        with:
          files: |
            .github/workflows/tests_docker.yml
            **/*.py
            **/*.cpp
            **/*.h
            python_tests/*.conf
            setup.py
            setup.cfg
            tox.ini
            python_tests/requirements.txt

  test-distributions:
    needs: check-changes
    if: needs.check-changes.outputs.any_changed == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        distribution: [almalinux10, rockylinux8, archlinux]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Docker Compose
        run: |
          if ! command -v docker-compose &> /dev/null; then
            echo "docker-compose not found, installing..."
            sudo apt-get update
            sudo apt-get install -y docker-compose
          else
            echo "docker-compose is already installed."
          fi
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ matrix.distribution }}-${{ hashFiles(format('docker/{0}/Dockerfile', matrix.distribution)) }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ matrix.distribution }}-

      - name: Ensure DockerEntry.sh is executable (${{ matrix.distribution }})
        run: chmod +x ./docker/${{ matrix.distribution }}/DockerEntry.sh

      - name: Build and spin up Docker containers (${{ matrix.distribution }})
        run: |
          docker-compose -f ./docker/${{ matrix.distribution }}/docker-compose.yml build
          docker-compose -f ./docker/${{ matrix.distribution }}/docker-compose.yml up -d

      - name: Wait for services to be ready (${{ matrix.distribution }})
        run: |
          WAIT_TIME=120
          for i in $(seq $WAIT_TIME -1 1); do
              if docker logs ${{ matrix.distribution }}_snmp_container 2>&1 | grep -q "Starting SNMP daemon..."; then
                  echo -ne "\nContainer started successfully in $((WAIT_TIME - i)) seconds.\n"
                  break
              fi
              echo -ne "Waiting for container to start... $i seconds remaining\r"
              sleep 1
          done
          echo -ne "\n"

      - name: Run unit tests inside the Docker container (${{ matrix.distribution }})
        run: |
          DISTRIBUTION=${{ matrix.distribution }}
          CONTAINER_NAME="${DISTRIBUTION}_snmp_container"
          COMPOSE_FILE="./docker/${DISTRIBUTION}/docker-compose.yml"
          
          if [ "$DISTRIBUTION" == "rockylinux8" ]; then
            # --- Python 3.9 (py39) ---
            echo "Running tox for py39 on rockylinux8..."
            docker-compose -f $COMPOSE_FILE exec -T $CONTAINER_NAME bash -c '
              tox -e py39 > test-outputs_rockylinux8_py39.txt 2>&1;
              mv test-results.xml test-results_rockylinux8_py39.xml;
            '
            # Copy artifacts for py39
            docker cp $CONTAINER_NAME:/ezsnmp/test-results_rockylinux8_py39.xml .
            docker cp $CONTAINER_NAME:/ezsnmp/test-outputs_rockylinux8_py39.txt .

            # --- Python 3.11 (py311) ---
            echo "Running tox for py311 on rockylinux8..."
            docker-compose -f $COMPOSE_FILE exec -T $CONTAINER_NAME bash -c '
              tox -e py311 > test-outputs_rockylinux8_py311.txt 2>&1;
              mv test-results.xml test-results_rockylinux8_py311.xml;
            '
            # Copy artifacts for py311
            docker cp $CONTAINER_NAME:/ezsnmp/test-results_rockylinux8_py311.xml .
            docker cp $CONTAINER_NAME:/ezsnmp/test-outputs_rockylinux8_py311.txt .
            
            # --- Python 3.12 (py312) ---
            echo "Running tox for py312 on rockylinux8..."
            docker-compose -f $COMPOSE_FILE exec -T $CONTAINER_NAME bash -c '
              tox -e py312 > test-outputs_rockylinux8_py312.txt 2>&1;
              mv test-results.xml test-results_rockylinux8_py312.xml;
            '
            # Copy artifacts for py312
            docker cp $CONTAINER_NAME:/ezsnmp/test-results_rockylinux8_py312.xml .
            docker cp $CONTAINER_NAME:/ezsnmp/test-outputs_rockylinux8_py312.txt .
            
          else
            echo "Running default tox environment for $DISTRIBUTION..."
            docker-compose -f $COMPOSE_FILE exec -T $CONTAINER_NAME bash -c '
              tox > test-outputs_${{ matrix.distribution }}.txt 2>&1;
              mv test-results.xml test-results_${{ matrix.distribution }}.xml;
            '
            # Copy artifacts for the default run (almalinux10)
            docker cp $CONTAINER_NAME:/ezsnmp/test-results_${{ matrix.distribution }}.xml .
            docker cp $CONTAINER_NAME:/ezsnmp/test-outputs_${{ matrix.distribution }}.txt .
          fi

      - name: Upload Test Results (${{ matrix.distribution }})
        uses: actions/upload-artifact@v4
        with:
          name: pytest-results_${{ matrix.distribution }}
          path: |
            test-results_${{ matrix.distribution }}*.xml
            test-outputs_${{ matrix.distribution }}*.txt

      - name: Bring down Docker containers (${{ matrix.distribution }})
        run: docker-compose -f ./docker/${{ matrix.distribution }}/docker-compose.yml down

  comment-pytest-coverage-report:
    runs-on: ubuntu-latest
    needs: test-distributions
    if: always() 
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v5
        with:
          pattern: pytest-results_*
          merge-multiple: true 
      
      - name: List files
        run: ls -Rlah

      - name: Pytest coverage comment (Dockerized Tests)
        uses: MishaKav/pytest-coverage-comment@v1.1.57
        with:
          title: Pytest Coverage Report - Dockerized Tests
          unique-id-for-comment: dockerized-tests
          hide-badge: true
          hide-report: true
          create-new-comment: false
          hide-comment: false
          report-only-changed-files: false
          multiple-files: |
            almalinux10, test-outputs_almalinux10.txt, test-results_almalinux10.xml
            archlinux, test-outputs_archlinux.txt, test-results_archlinux.xml
            rockylinux8_py39, test-outputs_rockylinux8_py39.txt, test-results_rockylinux8_py39.xml
            rockylinux8_py311, test-outputs_rockylinux8_py311.txt, test-results_rockylinux8_py311.xml
            rockylinux8_py312, test-outputs_rockylinux8_py312.txt, test-results_rockylinux8_py312.xml