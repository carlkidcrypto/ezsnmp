name: Run Dockerized Unit Tests

concurrency: tests-docker

on:
  push:
    branches: [ feature/get_auto_uts_in_docker_containers ]
  pull_request:
    branches: [ main ]

jobs:
  test-distributions:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        distribution: [almalinux10, rockylinux8]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Ensure DockerEntry.sh is executable (${{ matrix.distribution }})
        run: chmod +x ./docker/${{ matrix.distribution }}/DockerEntry.sh

      - name: Build and spin up Docker containers (${{ matrix.distribution }})
        run: |
          docker-compose -f ./docker/${{ matrix.distribution }}/docker-compose.yml build
          docker-compose -f ./docker/${{ matrix.distribution }}/docker-compose.yml up -d

      - name: Wait for services to be ready (${{ matrix.distribution }})
        run: |
          # Wait for the container to start by checking its logs
          WAIT_TIME=120
          for i in $(seq $WAIT_TIME -1 1); do
              if docker logs snmp_container 2>&1 | grep -q "Starting SNMP daemon..."; then
                  echo -ne "\nContainer started successfully in $((WAIT_TIME - i)) seconds.\n"
                  break
              fi
              echo -ne "Waiting for container to start... $i seconds remaining\r"
              sleep 1
          done
          echo -ne "\n"

      - name: Run unit tests inside the Docker container (${{ matrix.distribution }})
        run: |
          docker-compose -f ./docker/${{ matrix.distribution }}/docker-compose.yml exec -T snmp_container pytest python_tests

      - name: Bring down Docker containers (${{ matrix.distribution }})
        if: always()
        run: docker-compose -f ./docker/${{ matrix.distribution }}/docker-compose.yml down