name: Run Dockerized Unit Tests

concurrency: tests-docker

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      any_changed: ${{ steps.changed-files.outputs.any_changed }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Check for changes in source code
        id: changed-files
        uses: tj-actions/changed-files@v46.0.5
        with:
          files: |
            files: |
            .github/workflows/tests_docker.yml
            **/*.py
            **/*.cpp
            **/*.h
            python_tests/*.conf
            setup.py
            setup.cfg
            tox.ini
            python_tests/requirements.txt

  test-distributions:
    needs: check-changes
    if: needs.check-changes.outputs.any_changed == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        distribution: [almalinux10, rockylinux8]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Docker Compose
        run: |
          if ! command -v docker-compose &> /dev/null; then
            echo "docker-compose not found, installing..."
            sudo apt-get update
            sudo apt-get install -y docker-compose
          else
            echo "docker-compose is already installed."
          fi

      - name: Cache Docker images (${{ matrix.distribution }})
        uses: actions/cache@v4
        with:
          path: /tmp/.docker-cache
          key: docker-${{ matrix.distribution }}-${{ hashFiles('docker/${{ matrix.distribution }}/Dockerfile') }}
        restore-keys: |
          docker-${{ matrix.distribution }}-

      - name: Load cached Docker image (${{ matrix.distribution }})
        run: |
          if [ -f /tmp/.docker-cache/image.tar ]; then
          docker load -i /tmp/.docker-cache/image.tar
          fi

      - name: Ensure DockerEntry.sh is executable (${{ matrix.distribution }})
        run: chmod +x ./docker/${{ matrix.distribution }}/DockerEntry.sh

      - name: Build and spin up Docker containers (${{ matrix.distribution }})
        run: |
          docker-compose -f ./docker/${{ matrix.distribution }}/docker-compose.yml build
          mkdir -p /tmp/.docker-cache
          docker save ${{ matrix.distribution }}_snmp_container -o /tmp/.docker-cache/image.tar
          docker-compose -f ./docker/${{ matrix.distribution }}/docker-compose.yml up -d

      - name: Wait for services to be ready (${{ matrix.distribution }})
        run: |
          WAIT_TIME=120
          for i in $(seq $WAIT_TIME -1 1); do
              if docker logs ${{ matrix.distribution }}_snmp_container 2>&1 | grep -q "Starting SNMP daemon..."; then
                  echo -ne "\nContainer started successfully in $((WAIT_TIME - i)) seconds.\n"
                  break
              fi
              echo -ne "Waiting for container to start... $i seconds remaining\r"
              sleep 1
          done
          echo -ne "\n"

      - name: Run unit tests inside the Docker container (${{ matrix.distribution }})
        run: |
          docker-compose -f ./docker/${{ matrix.distribution }}/docker-compose.yml exec -T ${{ matrix.distribution }}_snmp_container bash -c '
            pwd;
            tox > test-outputs_${{ matrix.os }}_${{ matrix.python-version }}.txt 2>&1;
            ls -lah;
            cat test-results.xml;
            mv test-results.xml test-results_${{ matrix.os }}_${{ matrix.python-version }}.xml;
          '

      - name: Copy test results from Docker container (${{ matrix.distribution }})
        run: |
         docker cp ${{ matrix.distribution }}_snmp_container:/ezsnmp/test-results_${{ matrix.distribution }}.xml .
         docker cp ${{ matrix.distribution }}_snmp_container:/ezsnmp/test-outputs_${{ matrix.distribution }}.txt .

      - name: Upload Test Results (${{ matrix.distribution }})
        uses: actions/upload-artifact@v4
        with:
         name: pytest-results_${{ matrix.distribution }}
         path: |
          test-results_${{ matrix.distribution }}.xml
          test-outputs_${{ matrix.distribution }}.txt

      - name: Bring down Docker containers (${{ matrix.distribution }})
        run: docker-compose -f ./docker/${{ matrix.distribution }}/docker-compose.yml down

  comment-pytest-coverage-report:
    runs-on: ubuntu-latest
    needs: test-distributions
    if: needs.test-distributions.result == 'success'
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v5
        with:
          pattern: pytest-results_*
          merge-multiple: false
      
      - name: List files
        run: ls -Rlah pytest-results_*

      - name: Pytest coverage comment (Dockerized Tests)
        uses: MishaKav/pytest-coverage-comment@v1.1.57
        with:
          title: Pytest Coverage Report - Dockerized Tests
          unique-id-for-comment: dockerized-tests
          hide-badge: true
          hide-report: true
          create-new-comment: false
          hide-comment: false
          report-only-changed-files: false
          multiple-files: |
            almalinux10, pytest-results_almalinux10/test-outputs_almalinux10.txt, pytest-results_almalinux10/test-results_almalinux10.xml
            rockylinux8, pytest-results_rockylinux8/test-outputs_rockylinux8.txt, pytest-results_rockylinux8/test-results_rockylinux8.xml